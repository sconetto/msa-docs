{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MSA Docs - Study Case: HR System In this repository is an instance of the proposal of framework for the documentation of systems built using microservices, as proposed in the article Microservices Documentation Proposal 1 . Therefore the navigation represents an instance in a case study of the HR system, in which it was tested for framework validation in the article. In this framework, the documentation is build according to the desired view. The following structure describes how the structure of the documents in this system is arranged according to the strategy of the views: Solution - Documentation of the software design solution level. Modules - Documentation of individual architecture modules. Interface - Documentation of module interfaces and system interactions. Insert article full text link. \u21a9","title":"Home"},{"location":"#msa-docs-study-case-hr-system","text":"In this repository is an instance of the proposal of framework for the documentation of systems built using microservices, as proposed in the article Microservices Documentation Proposal 1 . Therefore the navigation represents an instance in a case study of the HR system, in which it was tested for framework validation in the article. In this framework, the documentation is build according to the desired view. The following structure describes how the structure of the documents in this system is arranged according to the strategy of the views: Solution - Documentation of the software design solution level. Modules - Documentation of individual architecture modules. Interface - Documentation of module interfaces and system interactions. Insert article full text link. \u21a9","title":"MSA Docs - Study Case: HR System"},{"location":"interfaces/about/","text":"About HR Project Interfaces Some of HR Project services are built with an API format (Application Programming Interface), due to this technology and the need to document comprehensively the interfaces the API Blueprint language was chosen to document these systems. This way we can write the blueprint in the chosen language format and easily transform it into markdown documents (that are part of this system), making them easy to write, to update and to deploy. The following interfaces are documented in the API Blueprint format: Interface - Auth API Interface - Paycheck API Interface - Register API Interface - Vacation API","title":"About Interfaces"},{"location":"interfaces/about/#about-hr-project-interfaces","text":"Some of HR Project services are built with an API format (Application Programming Interface), due to this technology and the need to document comprehensively the interfaces the API Blueprint language was chosen to document these systems. This way we can write the blueprint in the chosen language format and easily transform it into markdown documents (that are part of this system), making them easy to write, to update and to deploy. The following interfaces are documented in the API Blueprint format: Interface - Auth API Interface - Paycheck API Interface - Register API Interface - Vacation API","title":"About HR Project Interfaces"},{"location":"interfaces/api-auth/","text":"Auth Auth is a API using Keycloack and JWT to authenticate and manage users in the RH App Domain. You can view his documentation over at API Auth Module . API Link: Auth Apiary This API blueprint resource can be found at API Auth Blueprint . Auth API Root [/] This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details. Retrieve the Entry Point [GET] Response 200 (application/json) 1 2 3 4 { \"session\" : \"/session\" \"user\" : \"/user\" } Group Session Resources related to sessions in the API. Session [/session] A Session object has the following attributes: email password Create a new Session [POST] You may create a new session using this action. It takes a JSON object containing the user identifer and his password. email (string) - The user e-mail password (string) - The user password for authentication Request (application/json) 1 2 3 4 { \"email\" : \"miles.morales@email.com\" \"password\" : \"spidermanrules!\" } Response 201 (application/json) Body 1 2 3 { \"access_token\" : eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9 . eyJlbWFpbCI6Im1pbGVzLm1vcmFsZXNAZW1haWwuY29tIiwicGFzc3dvcmQiOiJzcGlkZXJtYW5ydWxlcyEiLCJqdGkiOiJmZTllN2Y1NC0zNTIzLTRhYTgtOTg5Yi1kYzhhM2RkYjA3ODYiLCJpYXQiOjE1Njk1MDg3NDQsImV4cCI6MTU2OTUxMjM0NH0 . K - rncSvY9v - x2tQC0cIekhw4yqGfW3i4MEyIS1ljn54 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Response 404 (application/json) Body 1 2 3 { \"message\" : \"User not found!\" } Group User User Session Resources related to users in the API User [/user/{user_id}] A User object has the following attributes: name created_at - A RFC3339 date when the user was created. updated_at - A RFC339 date when the user was updated. email - A string with user e-mail groups - An array of groups identifiers which user has access. url Parameters user_id: 1 (required, uuid) - ID of the User in form of an UUID View a User Detail [GET] Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 { \"name\" : \"Peter Parker\" , \"created_at\" : \"2014-11-11T08:40:51.620Z\" , \"updated_at\" : \"2018-08-21T21:16:09.712Z\" , \"email\" : \"peter.parker@email.com\" , \"groups\" : [ \"worker\", \"heroes\" ] \"url\" : \"/user/83883e79-65f1-42bc-82ce-33615b47fcca\" , } Create a new User [POST] You may create a new user (if you have this permission) using this action. It takes a JSON object containing a user and all his infos. On this action you don't have to add { user_id } in the URL. name (string) - The user name email (string) - The user e-mail groups (array[string]) - The list of groups which the user will have access Request (application/json) 1 2 3 4 5 6 7 8 9 { \"name\" : \"Miles Morales\" , \"email\" : \"miles.morales@email.com\" \"groups\" : [ \"workers\", \"heroes\", \"admins\" ] } Response 201 (application/json) Headers 1 Location : / user / ad609b8d - ae9b - 4487 - bff4 - 8 b1f995a323d Body 1 2 3 4 5 6 7 8 9 10 11 12 { \"name\" : \"Miles Morales\" , \"created_at\" : \"2019-09-25T12:01:41.091Z\" , \"updated_at\" : \"2019-09-25T12:01:41.091Z\" , \"email\" : \"miles.morales@email.com\" , \"groups\" : [ \"worker\", \"heroes\", \"admins\" ] \"url\" : \"/user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\" , } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Update a User [PATCH] You may update a user info (if you are the user or if you have this permission) using this action. It takes a JSON object containing a user and all the infos you want to update. name (string) - The user name (optional) email (string) - The user e-mail (optional) groups (array[string]) - The list of groups which the user will have access (optinal) Request (application/json) 1 2 3 4 5 6 { \"groups\" : [ \"workers\" , \"heroes\" ] } Response 201 (application/json) Headers 1 Location : / user / ad609b8d - ae9b - 4487 - bff4 - 8 b1f995a323d Body 1 2 3 4 5 6 7 8 9 10 11 { \"name\" : \"Miles Morales\" , \"created_at\" : \"2019-09-25T12:01:41.091Z\" , \"updated_at\" : \"2019-09-26T08:15:38.920Z\" , \"email\" : \"miles.morales@email.com\" , \"groups\" : [ \"worker\", \"heroes\" ] \"url\" : \"/user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\" , } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Remove a User [DELETE] You may remove a user (if you have this permission) using this action. Response 200 Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Auth API Blueprint"},{"location":"interfaces/api-auth/#auth","text":"Auth is a API using Keycloack and JWT to authenticate and manage users in the RH App Domain. You can view his documentation over at API Auth Module . API Link: Auth Apiary This API blueprint resource can be found at API Auth Blueprint .","title":"Auth"},{"location":"interfaces/api-auth/#auth-api-root","text":"This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.","title":"Auth API Root [/]"},{"location":"interfaces/api-auth/#retrieve-the-entry-point-get","text":"Response 200 (application/json) 1 2 3 4 { \"session\" : \"/session\" \"user\" : \"/user\" }","title":"Retrieve the Entry Point [GET]"},{"location":"interfaces/api-auth/#group-session","text":"Resources related to sessions in the API.","title":"Group Session"},{"location":"interfaces/api-auth/#session-session","text":"A Session object has the following attributes: email password","title":"Session [/session]"},{"location":"interfaces/api-auth/#create-a-new-session-post","text":"You may create a new session using this action. It takes a JSON object containing the user identifer and his password. email (string) - The user e-mail password (string) - The user password for authentication Request (application/json) 1 2 3 4 { \"email\" : \"miles.morales@email.com\" \"password\" : \"spidermanrules!\" } Response 201 (application/json) Body 1 2 3 { \"access_token\" : eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9 . eyJlbWFpbCI6Im1pbGVzLm1vcmFsZXNAZW1haWwuY29tIiwicGFzc3dvcmQiOiJzcGlkZXJtYW5ydWxlcyEiLCJqdGkiOiJmZTllN2Y1NC0zNTIzLTRhYTgtOTg5Yi1kYzhhM2RkYjA3ODYiLCJpYXQiOjE1Njk1MDg3NDQsImV4cCI6MTU2OTUxMjM0NH0 . K - rncSvY9v - x2tQC0cIekhw4yqGfW3i4MEyIS1ljn54 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Response 404 (application/json) Body 1 2 3 { \"message\" : \"User not found!\" }","title":"Create a new Session [POST]"},{"location":"interfaces/api-auth/#group-user","text":"","title":"Group User"},{"location":"interfaces/api-auth/#user-session","text":"Resources related to users in the API","title":"User Session"},{"location":"interfaces/api-auth/#user-useruser_id","text":"A User object has the following attributes: name created_at - A RFC3339 date when the user was created. updated_at - A RFC339 date when the user was updated. email - A string with user e-mail groups - An array of groups identifiers which user has access. url Parameters user_id: 1 (required, uuid) - ID of the User in form of an UUID","title":"User [/user/{user_id}]"},{"location":"interfaces/api-auth/#view-a-user-detail-get","text":"Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 { \"name\" : \"Peter Parker\" , \"created_at\" : \"2014-11-11T08:40:51.620Z\" , \"updated_at\" : \"2018-08-21T21:16:09.712Z\" , \"email\" : \"peter.parker@email.com\" , \"groups\" : [ \"worker\", \"heroes\" ] \"url\" : \"/user/83883e79-65f1-42bc-82ce-33615b47fcca\" , }","title":"View a User Detail [GET]"},{"location":"interfaces/api-auth/#create-a-new-user-post","text":"You may create a new user (if you have this permission) using this action. It takes a JSON object containing a user and all his infos. On this action you don't have to add { user_id } in the URL. name (string) - The user name email (string) - The user e-mail groups (array[string]) - The list of groups which the user will have access Request (application/json) 1 2 3 4 5 6 7 8 9 { \"name\" : \"Miles Morales\" , \"email\" : \"miles.morales@email.com\" \"groups\" : [ \"workers\", \"heroes\", \"admins\" ] } Response 201 (application/json) Headers 1 Location : / user / ad609b8d - ae9b - 4487 - bff4 - 8 b1f995a323d Body 1 2 3 4 5 6 7 8 9 10 11 12 { \"name\" : \"Miles Morales\" , \"created_at\" : \"2019-09-25T12:01:41.091Z\" , \"updated_at\" : \"2019-09-25T12:01:41.091Z\" , \"email\" : \"miles.morales@email.com\" , \"groups\" : [ \"worker\", \"heroes\", \"admins\" ] \"url\" : \"/user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\" , } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Create a new User [POST]"},{"location":"interfaces/api-auth/#update-a-user-patch","text":"You may update a user info (if you are the user or if you have this permission) using this action. It takes a JSON object containing a user and all the infos you want to update. name (string) - The user name (optional) email (string) - The user e-mail (optional) groups (array[string]) - The list of groups which the user will have access (optinal) Request (application/json) 1 2 3 4 5 6 { \"groups\" : [ \"workers\" , \"heroes\" ] } Response 201 (application/json) Headers 1 Location : / user / ad609b8d - ae9b - 4487 - bff4 - 8 b1f995a323d Body 1 2 3 4 5 6 7 8 9 10 11 { \"name\" : \"Miles Morales\" , \"created_at\" : \"2019-09-25T12:01:41.091Z\" , \"updated_at\" : \"2019-09-26T08:15:38.920Z\" , \"email\" : \"miles.morales@email.com\" , \"groups\" : [ \"worker\", \"heroes\" ] \"url\" : \"/user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\" , } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Update a User [PATCH]"},{"location":"interfaces/api-auth/#remove-a-user-delete","text":"You may remove a user (if you have this permission) using this action. Response 200 Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Remove a User [DELETE]"},{"location":"interfaces/api-paycheck/","text":"Paycheck Paycheck is a API used to manage all workers paycheck, benefits and others questions related to wage. You can view his documentation over at API Paycheck Module . API Link: Paycheck Apiary This API blueprint resource can be found at API Paycheck Blueprint . Paycheck API Root [/] This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details. Retrieve the Entry Point [GET] Response 200 (application/json) 1 2 3 { \"paycheck\" : \"/payroll\" } Group Payroll Resources related to questions in the API. Payroll [/payroll/{year}/{month}/{payroll_number}{?{status}={value}&{filter}={value}}] A Payroll object has the following attributes: payroll_number year month status employees payment Parameters payroll_number: 1 (optional, number) - Number of the Payroll in form of an integer year: 2019 (optional, number) - The year of the Payroll month: 2 (optional, number) - The month of the Payroll status: true (optional, boolean) - The status of the paycheck (true if active, false otherwise) View a Payroll Details [GET] Request (URL) 1 URL : / payroll / 2019 / 8 / 1 ? status = true Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 8 , \"status\" : true , \"employees\" : [ \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 1 . 99 , 1 . 99 ] } Create a new Payroll [POST] You may create a new payroll (if you have this permission) using this action. It takes a URL with the creation parameters. If there is a payroll for the given year and month, a new one will be created and the last one will be deactivated. year (number) - The year of the Payroll month (string) - The month of the Payroll Request (URL) 1 URL : / payroll / 2019 / 9 Response 200 (application/json) 1 2 3 4 5 6 7 8 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : null , \"payment\" : null , } Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"new_payroll\" : { \"payroll_number\" : 2 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : null , \"payment\" : null , } , \"old_payroll\" : { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : [ \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 1 . 99 , 1 . 99 ] } } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Update information on the Payroll [PATCH] You may update the payroll (if you have this permission) using this action. It takes a JSON with the objects you want to update. The updatable parameters are the following (if the objects is already fullfiled it will be overwrited): status (boolean) - The status of the paycheck employees (array[string]) - The list of employees that will be payed on that payroll payment (array[float]) - The value of the employees salary Request (URL) 1 URL : / payroll / 2019 / 9 / 2 Request (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 { \"employees\" : [ \"Steve Rogers\" , \"Miles Morales\" , \"Peter Parker\" ], \" payment : [ 3 . 99 , 1 . 99 , 1 . 99 ] } Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : [ \"Steve Rogers\" , \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 3 . 99 , 1 . 99 , 1 . 99 ] } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Delete Payroll [DELETE] You may create a new payroll (if you have this permission) using this action. It takes a URL with the search to delete parameters. Caution, this action is irreversible. Request (URL) 1 2 3 4 5 URL : / payroll / 2019 / 9 / 2 OR URL : / payroll / 2019 ? month = 9 & status = false Response 200 (application/json) Body 1 2 3 4 5 6 7 8 9 { \"deleted_payrolls\" : [ 2 ] } OR { \"deleted_payrolls\" : [ 2 , 3 ] } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Paycheck API Blueprint"},{"location":"interfaces/api-paycheck/#paycheck","text":"Paycheck is a API used to manage all workers paycheck, benefits and others questions related to wage. You can view his documentation over at API Paycheck Module . API Link: Paycheck Apiary This API blueprint resource can be found at API Paycheck Blueprint .","title":"Paycheck"},{"location":"interfaces/api-paycheck/#paycheck-api-root","text":"This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.","title":"Paycheck API Root [/]"},{"location":"interfaces/api-paycheck/#retrieve-the-entry-point-get","text":"Response 200 (application/json) 1 2 3 { \"paycheck\" : \"/payroll\" }","title":"Retrieve the Entry Point [GET]"},{"location":"interfaces/api-paycheck/#group-payroll","text":"Resources related to questions in the API.","title":"Group Payroll"},{"location":"interfaces/api-paycheck/#payroll-payrollyearmonthpayroll_numberstatusvaluefiltervalue","text":"A Payroll object has the following attributes: payroll_number year month status employees payment Parameters payroll_number: 1 (optional, number) - Number of the Payroll in form of an integer year: 2019 (optional, number) - The year of the Payroll month: 2 (optional, number) - The month of the Payroll status: true (optional, boolean) - The status of the paycheck (true if active, false otherwise)","title":"Payroll [/payroll/{year}/{month}/{payroll_number}{?{status}={value}&amp;{filter}={value}}]"},{"location":"interfaces/api-paycheck/#view-a-payroll-details-get","text":"Request (URL) 1 URL : / payroll / 2019 / 8 / 1 ? status = true Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 8 , \"status\" : true , \"employees\" : [ \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 1 . 99 , 1 . 99 ] }","title":"View a Payroll Details [GET]"},{"location":"interfaces/api-paycheck/#create-a-new-payroll-post","text":"You may create a new payroll (if you have this permission) using this action. It takes a URL with the creation parameters. If there is a payroll for the given year and month, a new one will be created and the last one will be deactivated. year (number) - The year of the Payroll month (string) - The month of the Payroll Request (URL) 1 URL : / payroll / 2019 / 9 Response 200 (application/json) 1 2 3 4 5 6 7 8 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : null , \"payment\" : null , } Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"new_payroll\" : { \"payroll_number\" : 2 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : null , \"payment\" : null , } , \"old_payroll\" : { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : [ \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 1 . 99 , 1 . 99 ] } } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Create a new Payroll [POST]"},{"location":"interfaces/api-paycheck/#update-information-on-the-payroll-patch","text":"You may update the payroll (if you have this permission) using this action. It takes a JSON with the objects you want to update. The updatable parameters are the following (if the objects is already fullfiled it will be overwrited): status (boolean) - The status of the paycheck employees (array[string]) - The list of employees that will be payed on that payroll payment (array[float]) - The value of the employees salary Request (URL) 1 URL : / payroll / 2019 / 9 / 2 Request (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 { \"employees\" : [ \"Steve Rogers\" , \"Miles Morales\" , \"Peter Parker\" ], \" payment : [ 3 . 99 , 1 . 99 , 1 . 99 ] } Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : [ \"Steve Rogers\" , \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 3 . 99 , 1 . 99 , 1 . 99 ] } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Update information on the Payroll [PATCH]"},{"location":"interfaces/api-paycheck/#delete-payroll-delete","text":"You may create a new payroll (if you have this permission) using this action. It takes a URL with the search to delete parameters. Caution, this action is irreversible. Request (URL) 1 2 3 4 5 URL : / payroll / 2019 / 9 / 2 OR URL : / payroll / 2019 ? month = 9 & status = false Response 200 (application/json) Body 1 2 3 4 5 6 7 8 9 { \"deleted_payrolls\" : [ 2 ] } OR { \"deleted_payrolls\" : [ 2 , 3 ] } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Delete Payroll [DELETE]"},{"location":"interfaces/api-register/","text":"Register Register is a simple API to manage employees. You can view this documentation over at API Vacation Module . API Link: Paycheck Apiary This API blueprint resource can be found at API Register Blueprint . Register API Root [/] This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details. Retrieve the Entry Point [GET] Response 200 (application/json) 1 2 3 4 { \"employee\" : \"/employee\" , \"relative\" : \"/relative\" } Group Employee Resources related to employees in the API. Employee [/employee/{register}] A Employee object has the following attributes: register hired_at - An RFC3339 date when the employee was hired. fired_at - An RFC3339 date when the employee was fired, if don't null. name - The name of the employee position - The name of the employee position gross_salary - The gross amount of the employee salary in form of a float Parameters register: 1 (required, number) - ID of the Employee in form of an integer View a Employee Detail [GET] Response 200 (application/json) 1 2 3 4 5 6 7 8 { \"register\" : 1 , \"hired_at\" : \"1962-08-15T08:00:00.000Z\" , \"fired_at\" : null , \"name\" : \"Peter Parker\" , \"position\" : \"Friendly Neighborhood\" , \"gross_salary\" : 1 . 99 } Hire a New Employee [POST] You may hire a new employee (if you have this permission) using this action. It takes a JSON object containing a employee and his infos. On this action you don't have to add { register } in the URL. name (string) - The employee name position (string) - The employee position gross_salary (float) - The employee gross salary Request (application/json) 1 2 3 4 5 { \"name\" : \"Nick Fury\" , \"position\" : \"SHIELD Leader\" , \"gross_salary\" : 99999 . 99 } Response 201 (application/json) Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : null , \"position\" : \"SHIELD Leader\" , \"gross_salary\" : 99999 . 99 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Update a Employee [PATCH] You may update a employee information (if you have this permission) using this action. It takes a JSON object containing a employee and the info that you want to update. name (string) - The employee name position (string) - The employee position gross_salary (float) - The employee gross salary Request (application/json) 1 2 3 4 { \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 201 (application/json) Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 , \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : null , \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Fire a Employee [DELETE] You may fire a employee (if you have this permission) using this action. His information will remain in the system but the fired_at attribute will receive the date of the action. Response 200 Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 , \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : \"2020-09-30T08:01:12.812Z\" , \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Group Relative Resources related to relatives in the API. Relative [/relative/{employee_register}/{id}] A Relative object has the following attributes: employee_register id name kinship Parameters employee_register: 1 (required, number) - ID of the employee which is related to the relative in form of an integer id: 1 (required, number) - ID of the relative in form of an integer View a Relative Detail [GET] Response 200 (application/json) 1 2 3 4 5 6 { \"employee_register\" : 1 , \"id\" : 1 , \"name\" : \"May Parker\" , \"kinship\" : \"Aunt\" } Add a New Relative [POST] You may add a new relative (if you have this permission) using this action. It takes a JSON object containing a relative and his infos. On this action you don't have to add the relative { id } in the URL, only the { employee_register } . name (string) - The relative name kinship (string) - The relative kinship type name Request (application/json) 1 2 3 4 { \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Wife\" } Response 201 (application/json) Headers 1 Location : / relative / 1 / 2 Body 1 2 3 4 5 6 { \"id\" : 2 , \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Wife\" } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Update a Relative [PATCH] You may update a relative information (if you have this permission) using this action. It takes a JSON object containing a relative and the info that you want to update. name (string) - The relative name kinship (string) - The relative kinship type name Request (application/json) 1 2 3 4 { \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } Response 201 (application/json) Headers 1 Location : / relative / 1 / 2 Body 1 2 3 4 5 6 { \"id\" : 2 , \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Remove a Relative [DELETE] You may remove a relative (if you have this permission) using this action. Response 200 Headers 1 Location : / relative / 1 Body 1 2 3 4 5 6 7 { \"old_value\" : { \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } } Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Register API Blueprint"},{"location":"interfaces/api-register/#register","text":"Register is a simple API to manage employees. You can view this documentation over at API Vacation Module . API Link: Paycheck Apiary This API blueprint resource can be found at API Register Blueprint .","title":"Register"},{"location":"interfaces/api-register/#register-api-root","text":"This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.","title":"Register API Root [/]"},{"location":"interfaces/api-register/#retrieve-the-entry-point-get","text":"Response 200 (application/json) 1 2 3 4 { \"employee\" : \"/employee\" , \"relative\" : \"/relative\" }","title":"Retrieve the Entry Point [GET]"},{"location":"interfaces/api-register/#group-employee","text":"Resources related to employees in the API.","title":"Group Employee"},{"location":"interfaces/api-register/#employee-employeeregister","text":"A Employee object has the following attributes: register hired_at - An RFC3339 date when the employee was hired. fired_at - An RFC3339 date when the employee was fired, if don't null. name - The name of the employee position - The name of the employee position gross_salary - The gross amount of the employee salary in form of a float Parameters register: 1 (required, number) - ID of the Employee in form of an integer","title":"Employee [/employee/{register}]"},{"location":"interfaces/api-register/#view-a-employee-detail-get","text":"Response 200 (application/json) 1 2 3 4 5 6 7 8 { \"register\" : 1 , \"hired_at\" : \"1962-08-15T08:00:00.000Z\" , \"fired_at\" : null , \"name\" : \"Peter Parker\" , \"position\" : \"Friendly Neighborhood\" , \"gross_salary\" : 1 . 99 }","title":"View a Employee Detail [GET]"},{"location":"interfaces/api-register/#hire-a-new-employee-post","text":"You may hire a new employee (if you have this permission) using this action. It takes a JSON object containing a employee and his infos. On this action you don't have to add { register } in the URL. name (string) - The employee name position (string) - The employee position gross_salary (float) - The employee gross salary Request (application/json) 1 2 3 4 5 { \"name\" : \"Nick Fury\" , \"position\" : \"SHIELD Leader\" , \"gross_salary\" : 99999 . 99 } Response 201 (application/json) Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : null , \"position\" : \"SHIELD Leader\" , \"gross_salary\" : 99999 . 99 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Hire a New Employee [POST]"},{"location":"interfaces/api-register/#update-a-employee-patch","text":"You may update a employee information (if you have this permission) using this action. It takes a JSON object containing a employee and the info that you want to update. name (string) - The employee name position (string) - The employee position gross_salary (float) - The employee gross salary Request (application/json) 1 2 3 4 { \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 201 (application/json) Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 , \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : null , \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Update a Employee [PATCH]"},{"location":"interfaces/api-register/#fire-a-employee-delete","text":"You may fire a employee (if you have this permission) using this action. His information will remain in the system but the fired_at attribute will receive the date of the action. Response 200 Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 , \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : \"2020-09-30T08:01:12.812Z\" , \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Fire a Employee [DELETE]"},{"location":"interfaces/api-register/#group-relative","text":"Resources related to relatives in the API.","title":"Group Relative"},{"location":"interfaces/api-register/#relative-relativeemployee_registerid","text":"A Relative object has the following attributes: employee_register id name kinship Parameters employee_register: 1 (required, number) - ID of the employee which is related to the relative in form of an integer id: 1 (required, number) - ID of the relative in form of an integer","title":"Relative [/relative/{employee_register}/{id}]"},{"location":"interfaces/api-register/#view-a-relative-detail-get","text":"Response 200 (application/json) 1 2 3 4 5 6 { \"employee_register\" : 1 , \"id\" : 1 , \"name\" : \"May Parker\" , \"kinship\" : \"Aunt\" }","title":"View a Relative Detail [GET]"},{"location":"interfaces/api-register/#add-a-new-relative-post","text":"You may add a new relative (if you have this permission) using this action. It takes a JSON object containing a relative and his infos. On this action you don't have to add the relative { id } in the URL, only the { employee_register } . name (string) - The relative name kinship (string) - The relative kinship type name Request (application/json) 1 2 3 4 { \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Wife\" } Response 201 (application/json) Headers 1 Location : / relative / 1 / 2 Body 1 2 3 4 5 6 { \"id\" : 2 , \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Wife\" } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Add a New Relative [POST]"},{"location":"interfaces/api-register/#update-a-relative-patch","text":"You may update a relative information (if you have this permission) using this action. It takes a JSON object containing a relative and the info that you want to update. name (string) - The relative name kinship (string) - The relative kinship type name Request (application/json) 1 2 3 4 { \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } Response 201 (application/json) Headers 1 Location : / relative / 1 / 2 Body 1 2 3 4 5 6 { \"id\" : 2 , \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Update a Relative [PATCH]"},{"location":"interfaces/api-register/#remove-a-relative-delete","text":"You may remove a relative (if you have this permission) using this action. Response 200 Headers 1 Location : / relative / 1 Body 1 2 3 4 5 6 7 { \"old_value\" : { \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } } Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Remove a Relative [DELETE]"},{"location":"interfaces/api-vacation/","text":"Vacation Vacation is a simple API to manage employees vacations and vacation scheduling. You can view this documentation over at API Vacation Module . API Link: Paycheck Apiary This API blueprint resource can be found at API Vacation Blueprint . Vacation API Root [/] This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details. Retrieve the Entry Point [GET] Response 200 (application/json) 1 2 3 { \"vacation\" : \"/vacation\" } Group Vacation Resources related to questions in the API. Vacation [/vacation/{year}/{month}] A Question object has the following attributes: year - An integer representing the year month - An integer representing the month number_employees - An integer representing how many employees have vacation employees - An array of Employees objects with vacation info Parameters year: 2019 (required, number) - Given vacation year month: 9 (required, number) - Given vacation month View a Vacation Detail [GET] Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \" year \" : 2019 , \" month \" : \" september \" , \" number_employees \" : 2 , \" employees \" : [ { \" register \" : 1 , \" name \" : \" Peter Parker \" , \" start \" : \" 2019-09-01 \" , \" end \" : \" 2019-09-15 \" }, { \" register \" : 2 , \" name \" : \" Miles Morales \" , \" start \" : \" 2019-09-15 \" , \" end \" : \" 2019-09-30 \" } ] } Create/Update a Employee Vacation [POST] You may create/update a employee vacation (if you have this permission) using this action. It takes a JSON object containing a employee and all vacation infos. If the employee with the given register already exist this action will override the information. The employee-vacation object have the following structure. register (integer) - The employee register name (string) - The employee name start (date) - The start date of the employee vacation end (date) - The end date of the employee vacation Request (application/json) 1 2 3 4 5 6 { \" register \" : 3 \" name \" : \" Tony Stark \" , \" start \" : \" 2019-09-01 \" , \" end \" : \" 2019-09-30 \" } Response 201 (application/json) Headers 1 Location : / vacation / 2019 / 9 Body 1 2 3 4 5 { \"year\" : 2019 , \"month\" : \"september\" , \"number_employees\" : 3 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Remove a Employee Vacation [DELETE] You may remove a employee vacation (if you have this permission) using this action. It takes a JSON object containing a employee register. The employee-vacation object have the following structure. register (integer or array[integer]) - The employee register Request (application/json) 1 2 3 { \"register\" : [ 2 , 3 ] } Response 201 (application/json) Headers 1 Location : / vacation / 2019 / 9 Body 1 2 3 4 5 { \"year\" : 2019 , \"month\" : \"september\" , \"number_employees\" : 1 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Vacation API Blueprint"},{"location":"interfaces/api-vacation/#vacation","text":"Vacation is a simple API to manage employees vacations and vacation scheduling. You can view this documentation over at API Vacation Module . API Link: Paycheck Apiary This API blueprint resource can be found at API Vacation Blueprint .","title":"Vacation"},{"location":"interfaces/api-vacation/#vacation-api-root","text":"This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.","title":"Vacation API Root [/]"},{"location":"interfaces/api-vacation/#retrieve-the-entry-point-get","text":"Response 200 (application/json) 1 2 3 { \"vacation\" : \"/vacation\" }","title":"Retrieve the Entry Point [GET]"},{"location":"interfaces/api-vacation/#group-vacation","text":"Resources related to questions in the API.","title":"Group Vacation"},{"location":"interfaces/api-vacation/#vacation-vacationyearmonth","text":"A Question object has the following attributes: year - An integer representing the year month - An integer representing the month number_employees - An integer representing how many employees have vacation employees - An array of Employees objects with vacation info Parameters year: 2019 (required, number) - Given vacation year month: 9 (required, number) - Given vacation month","title":"Vacation [/vacation/{year}/{month}]"},{"location":"interfaces/api-vacation/#view-a-vacation-detail-get","text":"Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \" year \" : 2019 , \" month \" : \" september \" , \" number_employees \" : 2 , \" employees \" : [ { \" register \" : 1 , \" name \" : \" Peter Parker \" , \" start \" : \" 2019-09-01 \" , \" end \" : \" 2019-09-15 \" }, { \" register \" : 2 , \" name \" : \" Miles Morales \" , \" start \" : \" 2019-09-15 \" , \" end \" : \" 2019-09-30 \" } ] }","title":"View a Vacation Detail [GET]"},{"location":"interfaces/api-vacation/#createupdate-a-employee-vacation-post","text":"You may create/update a employee vacation (if you have this permission) using this action. It takes a JSON object containing a employee and all vacation infos. If the employee with the given register already exist this action will override the information. The employee-vacation object have the following structure. register (integer) - The employee register name (string) - The employee name start (date) - The start date of the employee vacation end (date) - The end date of the employee vacation Request (application/json) 1 2 3 4 5 6 { \" register \" : 3 \" name \" : \" Tony Stark \" , \" start \" : \" 2019-09-01 \" , \" end \" : \" 2019-09-30 \" } Response 201 (application/json) Headers 1 Location : / vacation / 2019 / 9 Body 1 2 3 4 5 { \"year\" : 2019 , \"month\" : \"september\" , \"number_employees\" : 3 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Create/Update a Employee Vacation [POST]"},{"location":"interfaces/api-vacation/#remove-a-employee-vacation-delete","text":"You may remove a employee vacation (if you have this permission) using this action. It takes a JSON object containing a employee register. The employee-vacation object have the following structure. register (integer or array[integer]) - The employee register Request (application/json) 1 2 3 { \"register\" : [ 2 , 3 ] } Response 201 (application/json) Headers 1 Location : / vacation / 2019 / 9 Body 1 2 3 4 5 { \"year\" : 2019 , \"month\" : \"september\" , \"number_employees\" : 1 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Remove a Employee Vacation [DELETE]"},{"location":"modules/api-auth/","text":"HR System - Auth API The Auth API is responsible to manage all the system authentication and security in the HR system. The API was create to manage all access groups between the employees of the organization. Dependencies Python 3.7.3 Flask 1.1.1 python-keycloak 0.17.5 Configuration The Auth API configuration is through operating system environment variables. Therefore the configuration must be done in host or must be passed to the container environment. The available settings are: HTTP_PORT : HTTP port number on which the service will be available. DATABASE_HOST : Database server network address. DATABASE_PORT : Port on which database service is available. DATABASE_NAME : Schema name available for the service. DATABASE_USER : Username for database authentication. DATABASE_PASSWORD : User password for database authentication. KEYCLOAK_ADMIN : Keycloak API admin username. KEYCLOAK_PASSWORD : User password for Keycloak API authentication. If you have questions about how to set environment variables check these links: Environment Variables - Linux Environment Variables - Docker Observation : The system was developed to run in Linux and Docker environments. No official support for Windows. Development Installing VirtualEnvWrapper We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here . But you can also follow these steps below for installing the environment: 1 2 sudo python3 -m pip install -U pip # Update pip sudo python3 -m pip install virtualenvwrapper # Install virtualenvwrapper module Observation : If you do not have administrator access on the machine remove sudo from the beginning of the command and add the flag --user to the end of the command. Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following export : 1 export PROJECT_HOME = /path/to/project Run the shell startup file for the changes to take effect, for example: 1 source ~/.bashrc Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name auth : 1 mkvirtualenv -p $( which python3 ) auth To use it: 1 2 3 workon auth sudo python3 -m pip install pipenv pipenv install # Will install all of the project dependencies Observaion : Again, if necessary, add the flag --user to make the pipenv package installation for the local user. Local Execution For local system execution, run the following command in the project root folder (assuming virtualenv is already active): 1 python src/main.py This will run the system on localhost and will be available on the HTTP_PORT port configured for the system. This way you can test new implementations. Tests To run the Auth API tests follow the script below: Enable virtualenv auth ; Ensure that the dependencies are installed, especially: 1 2 3 pytest pytest - coverage flake8 Run the commands below: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Set the python path as the project folder pytest src/ # Performs the tests pytest --cov = auth src/ # Performs tests evaluating coverage pytest --cov = auth --cov-report xml src/ # Generate the XML report of coverage flake8 src/ # Run PEP8 linter unset PYTHONPATH # Unset PYTHONPATH variable During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage . During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8 Build To build the API Auth service just follow the script below: 1 docker build -t api-auth:<version> . Setting the version on < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 and etc. Make sure you have logged in to the docker hub service. If you do not, run the docker login command. 1 docker push api-auth:<version> Finally, if the system will be executed by the built container docker, execute: 1 docker run -d --name api-auth -e .env api-auth Observation : Assumes that the settings are listed in the .env file. For more settings, execution options, and supplemental documentation, go to Docker","title":"Auth API"},{"location":"modules/api-auth/#hr-system-auth-api","text":"The Auth API is responsible to manage all the system authentication and security in the HR system. The API was create to manage all access groups between the employees of the organization.","title":"HR System - Auth API"},{"location":"modules/api-auth/#dependencies","text":"Python 3.7.3 Flask 1.1.1 python-keycloak 0.17.5","title":"Dependencies"},{"location":"modules/api-auth/#configuration","text":"The Auth API configuration is through operating system environment variables. Therefore the configuration must be done in host or must be passed to the container environment. The available settings are: HTTP_PORT : HTTP port number on which the service will be available. DATABASE_HOST : Database server network address. DATABASE_PORT : Port on which database service is available. DATABASE_NAME : Schema name available for the service. DATABASE_USER : Username for database authentication. DATABASE_PASSWORD : User password for database authentication. KEYCLOAK_ADMIN : Keycloak API admin username. KEYCLOAK_PASSWORD : User password for Keycloak API authentication. If you have questions about how to set environment variables check these links: Environment Variables - Linux Environment Variables - Docker Observation : The system was developed to run in Linux and Docker environments. No official support for Windows.","title":"Configuration"},{"location":"modules/api-auth/#development","text":"","title":"Development"},{"location":"modules/api-auth/#installing-virtualenvwrapper","text":"We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here . But you can also follow these steps below for installing the environment: 1 2 sudo python3 -m pip install -U pip # Update pip sudo python3 -m pip install virtualenvwrapper # Install virtualenvwrapper module Observation : If you do not have administrator access on the machine remove sudo from the beginning of the command and add the flag --user to the end of the command. Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following export : 1 export PROJECT_HOME = /path/to/project Run the shell startup file for the changes to take effect, for example: 1 source ~/.bashrc Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name auth : 1 mkvirtualenv -p $( which python3 ) auth To use it: 1 2 3 workon auth sudo python3 -m pip install pipenv pipenv install # Will install all of the project dependencies Observaion : Again, if necessary, add the flag --user to make the pipenv package installation for the local user.","title":"Installing VirtualEnvWrapper"},{"location":"modules/api-auth/#local-execution","text":"For local system execution, run the following command in the project root folder (assuming virtualenv is already active): 1 python src/main.py This will run the system on localhost and will be available on the HTTP_PORT port configured for the system. This way you can test new implementations.","title":"Local Execution"},{"location":"modules/api-auth/#tests","text":"To run the Auth API tests follow the script below: Enable virtualenv auth ; Ensure that the dependencies are installed, especially: 1 2 3 pytest pytest - coverage flake8 Run the commands below: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Set the python path as the project folder pytest src/ # Performs the tests pytest --cov = auth src/ # Performs tests evaluating coverage pytest --cov = auth --cov-report xml src/ # Generate the XML report of coverage flake8 src/ # Run PEP8 linter unset PYTHONPATH # Unset PYTHONPATH variable During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage . During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8","title":"Tests"},{"location":"modules/api-auth/#build","text":"To build the API Auth service just follow the script below: 1 docker build -t api-auth:<version> . Setting the version on < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 and etc. Make sure you have logged in to the docker hub service. If you do not, run the docker login command. 1 docker push api-auth:<version> Finally, if the system will be executed by the built container docker, execute: 1 docker run -d --name api-auth -e .env api-auth Observation : Assumes that the settings are listed in the .env file. For more settings, execution options, and supplemental documentation, go to Docker","title":"Build"},{"location":"modules/api-paycheck/","text":"HR System - Paycheck API The Payments API is responsible for querying and processing employee pay data in the context of the organization's people management. The API was created out of the human resources system's need, but it was designed to allow access to query services by other systems and services that require employee payroll information. Dependencies Python 3.7.3 Flask 1.1.1 Configuration The Paycheck API configuration is through operating system environment variables. Therefore the configuration must be done on the host or must be passed to the container environment. The available settings are: HTTP_PORT : HTTP port number on which the service will be available. DECIMAL_PLACES : Number of decimal places to display calculations. PAYCHECK_CURRENCY : Which are the currency for the payment amounts. Available BRL ( R$ ) and USD ( US$ ) . If you have questions about how to set environment variables check these links: Environment Variables - Linux Environment Variables - Docker Observation : The system was developed to run in Linux and Docker environments. No official support for Windows. Development Installing VirtualEnvWrapper We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here . But you can also follow these steps below for installing the environment: 1 2 sudo python3 -m pip install -U pip # Update pip sudo python3 -m pip install virtualenvwrapper # Install virtualenvwrapper module Observation : If you do not have administrator access on the machine remove sudo from the beginning of the command and add the flag --user to the end of the command. Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following export : 1 export PROJECT_HOME = /path/to/project Run the shell startup file for the changes to take effect, for example: 1 source ~/.bashrc Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name paycheck : 1 mkvirtualenv -p $( which python3 ) paycheck To use it: 1 2 3 workon paycheck sudo python3 -m pip install pipenv pipenv install # Will install all of the project dependencies Observaion : Again, if necessary, add the flag --user to make the pipenv package installation for the local user. Local Execution For local system execution, run the following command in the project root folder (assuming virtualenv is already active): 1 python src/main.py This will run the system on localhost and will be available on the HTTP_PORT port configured for the system. This way you can test new implementations. Tests To run the Paycheck API tests follow the script below: Enable virtualenv paycheck ; Ensure that the dependencies are installed, especially: 1 2 3 pytest pytest - coverage flake8 Run the commands below: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Set the python path as the project folder pytest src/ # Performs the tests pytest --cov = paycheck src/ # Performs tests evaluating coverage pytest --cov = paycheck --cov-report xml src/ # Generate the XML report of coverage flake8 src/ # Run PEP8 linter unset PYTHONPATH # Unset PYTHONPATH variable During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage . During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8 Build To build the API Paycheck service just follow the script below: 1 docker build -t api-paycheck:<version> . Setting the version on < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 and etc. Make sure you have logged in to the docker hub service. If you do not, run the docker login command. 1 docker push api-paycheck:<version> Finally, if the system will be executed by the built container docker, execute: 1 docker run -d --name api-paycheck -e .env api-paycheck Observation : Assumes that the settings are listed in the .env file. For more settings, execution options, and supplemental documentation, go to Docker","title":"Paycheck API"},{"location":"modules/api-paycheck/#hr-system-paycheck-api","text":"The Payments API is responsible for querying and processing employee pay data in the context of the organization's people management. The API was created out of the human resources system's need, but it was designed to allow access to query services by other systems and services that require employee payroll information.","title":"HR System - Paycheck API"},{"location":"modules/api-paycheck/#dependencies","text":"Python 3.7.3 Flask 1.1.1","title":"Dependencies"},{"location":"modules/api-paycheck/#configuration","text":"The Paycheck API configuration is through operating system environment variables. Therefore the configuration must be done on the host or must be passed to the container environment. The available settings are: HTTP_PORT : HTTP port number on which the service will be available. DECIMAL_PLACES : Number of decimal places to display calculations. PAYCHECK_CURRENCY : Which are the currency for the payment amounts. Available BRL ( R$ ) and USD ( US$ ) . If you have questions about how to set environment variables check these links: Environment Variables - Linux Environment Variables - Docker Observation : The system was developed to run in Linux and Docker environments. No official support for Windows.","title":"Configuration"},{"location":"modules/api-paycheck/#development","text":"","title":"Development"},{"location":"modules/api-paycheck/#installing-virtualenvwrapper","text":"We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here . But you can also follow these steps below for installing the environment: 1 2 sudo python3 -m pip install -U pip # Update pip sudo python3 -m pip install virtualenvwrapper # Install virtualenvwrapper module Observation : If you do not have administrator access on the machine remove sudo from the beginning of the command and add the flag --user to the end of the command. Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following export : 1 export PROJECT_HOME = /path/to/project Run the shell startup file for the changes to take effect, for example: 1 source ~/.bashrc Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name paycheck : 1 mkvirtualenv -p $( which python3 ) paycheck To use it: 1 2 3 workon paycheck sudo python3 -m pip install pipenv pipenv install # Will install all of the project dependencies Observaion : Again, if necessary, add the flag --user to make the pipenv package installation for the local user.","title":"Installing VirtualEnvWrapper"},{"location":"modules/api-paycheck/#local-execution","text":"For local system execution, run the following command in the project root folder (assuming virtualenv is already active): 1 python src/main.py This will run the system on localhost and will be available on the HTTP_PORT port configured for the system. This way you can test new implementations.","title":"Local Execution"},{"location":"modules/api-paycheck/#tests","text":"To run the Paycheck API tests follow the script below: Enable virtualenv paycheck ; Ensure that the dependencies are installed, especially: 1 2 3 pytest pytest - coverage flake8 Run the commands below: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Set the python path as the project folder pytest src/ # Performs the tests pytest --cov = paycheck src/ # Performs tests evaluating coverage pytest --cov = paycheck --cov-report xml src/ # Generate the XML report of coverage flake8 src/ # Run PEP8 linter unset PYTHONPATH # Unset PYTHONPATH variable During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage . During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8","title":"Tests"},{"location":"modules/api-paycheck/#build","text":"To build the API Paycheck service just follow the script below: 1 docker build -t api-paycheck:<version> . Setting the version on < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 and etc. Make sure you have logged in to the docker hub service. If you do not, run the docker login command. 1 docker push api-paycheck:<version> Finally, if the system will be executed by the built container docker, execute: 1 docker run -d --name api-paycheck -e .env api-paycheck Observation : Assumes that the settings are listed in the .env file. For more settings, execution options, and supplemental documentation, go to Docker","title":"Build"},{"location":"modules/api-register/","text":"HR System - Register API The Register API is responsible for retrieving and maintaining data regarding the registration of employees in the context of HR management of the organization. The API was created out of HR system necessity, but it was designed for being used by other systems and services that require employee data. Dependencies Python 3.7.3 Flask 1.1.1 Configuration You should set environment variables up in the operational system in order to prepare the API for use. Therefore the configuration must be done in the host OS or should be passed to the container environment. The available settings are: HTTP_PORT : HTTP port number on which the service will be available. DATABASE_HOST : Database server network address. DATABASE_PORT : Port on which database service is available. DATABASE_NAME : Schema name available for the service. DATABASE_USER : Username for database authentication. DATABASE_PASSWORD : User password for database authentication. If you have questions about how to set environment variables check these links: Environment Variables - Linux Environment Variables - Docker Observation : The system was developed to run in Linux and Docker environments. No official support for Windows. Development Installing VirtualEnvWrapper We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here . But you can also follow these steps below for installing the environment: 1 2 sudo python3 -m pip install -U pip # Update pip sudo python3 -m pip install virtualenvwrapper # Install virtualenvwrapper module Observation : If you do not have administrator access on the machine remove sudo from the beginning of the command and add the flag --user to the end of the command. Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following export : 1 export PROJECT_HOME = /path/to/project Run the shell startup file for the changes to take effect, for example: 1 source ~/.bashrc Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name register : 1 mkvirtualenv -p $( which python3 ) register To use it: 1 2 3 workon register sudo python3 -m pip install pipenv pipenv install # Will install all of the project dependencies Observaion : Again, if necessary, add the flag --user to make the pipenv package installation for the local user. Local Execution For local system execution, run the following command in the project root folder (assuming virtualenv is already active): 1 python src/main.py This will run the system on localhost and will be available on the HTTP_PORT port configured for the system. This way you can test new implementations. Tests To run the Register API tests follow the script below: Enable virtualenv register ; Ensure that the dependencies are installed, especially: 1 2 3 pytest pytest - coverage flake8 Run the commands below: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Set the python path as the project folder pytest src/ # Performs the tests pytest --cov = register src/ # Performs tests evaluating coverage pytest --cov = register --cov-report xml src/ # Generate the XML report of coverage flake8 src/ # Run PEP8 linter unset PYTHONPATH # Unset PYTHONPATH variable During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage . During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8 Build To build the API Register service just follow the script below: 1 docker build -t api-register:<version> . Setting the version on < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 and etc. Make sure you have logged in to the docker hub service. If you do not, run the docker login command. 1 docker push api-register:<version> Finally, if the system will be executed by the built container docker, execute: 1 docker run -d --name api-register -e .env api-register Observation : Assumes that the settings are listed in the .env file. For more settings, execution options, and supplemental documentation, go to Docker","title":"Register API"},{"location":"modules/api-register/#hr-system-register-api","text":"The Register API is responsible for retrieving and maintaining data regarding the registration of employees in the context of HR management of the organization. The API was created out of HR system necessity, but it was designed for being used by other systems and services that require employee data.","title":"HR System - Register API"},{"location":"modules/api-register/#dependencies","text":"Python 3.7.3 Flask 1.1.1","title":"Dependencies"},{"location":"modules/api-register/#configuration","text":"You should set environment variables up in the operational system in order to prepare the API for use. Therefore the configuration must be done in the host OS or should be passed to the container environment. The available settings are: HTTP_PORT : HTTP port number on which the service will be available. DATABASE_HOST : Database server network address. DATABASE_PORT : Port on which database service is available. DATABASE_NAME : Schema name available for the service. DATABASE_USER : Username for database authentication. DATABASE_PASSWORD : User password for database authentication. If you have questions about how to set environment variables check these links: Environment Variables - Linux Environment Variables - Docker Observation : The system was developed to run in Linux and Docker environments. No official support for Windows.","title":"Configuration"},{"location":"modules/api-register/#development","text":"","title":"Development"},{"location":"modules/api-register/#installing-virtualenvwrapper","text":"We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here . But you can also follow these steps below for installing the environment: 1 2 sudo python3 -m pip install -U pip # Update pip sudo python3 -m pip install virtualenvwrapper # Install virtualenvwrapper module Observation : If you do not have administrator access on the machine remove sudo from the beginning of the command and add the flag --user to the end of the command. Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following export : 1 export PROJECT_HOME = /path/to/project Run the shell startup file for the changes to take effect, for example: 1 source ~/.bashrc Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name register : 1 mkvirtualenv -p $( which python3 ) register To use it: 1 2 3 workon register sudo python3 -m pip install pipenv pipenv install # Will install all of the project dependencies Observaion : Again, if necessary, add the flag --user to make the pipenv package installation for the local user.","title":"Installing VirtualEnvWrapper"},{"location":"modules/api-register/#local-execution","text":"For local system execution, run the following command in the project root folder (assuming virtualenv is already active): 1 python src/main.py This will run the system on localhost and will be available on the HTTP_PORT port configured for the system. This way you can test new implementations.","title":"Local Execution"},{"location":"modules/api-register/#tests","text":"To run the Register API tests follow the script below: Enable virtualenv register ; Ensure that the dependencies are installed, especially: 1 2 3 pytest pytest - coverage flake8 Run the commands below: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Set the python path as the project folder pytest src/ # Performs the tests pytest --cov = register src/ # Performs tests evaluating coverage pytest --cov = register --cov-report xml src/ # Generate the XML report of coverage flake8 src/ # Run PEP8 linter unset PYTHONPATH # Unset PYTHONPATH variable During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage . During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8","title":"Tests"},{"location":"modules/api-register/#build","text":"To build the API Register service just follow the script below: 1 docker build -t api-register:<version> . Setting the version on < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 and etc. Make sure you have logged in to the docker hub service. If you do not, run the docker login command. 1 docker push api-register:<version> Finally, if the system will be executed by the built container docker, execute: 1 docker run -d --name api-register -e .env api-register Observation : Assumes that the settings are listed in the .env file. For more settings, execution options, and supplemental documentation, go to Docker","title":"Build"},{"location":"modules/api-vacation/","text":"HR System - Vacation API The Vacation API is responsible for querying and managing employee vacation data in the context of the organization's people management. The API was created out of the need for the human resources system, but it was designed to be used by other systems and services that require employee vacation information. Dependencies Python 3.7.3 Flask 1.1.1 Configuration Vacation API configuration is done through operating system environment variables. Therefore the configuration must be done on the host or must be passed to the container environment. The available settings are: HTTP_PORT : HTTP port number on which the service will be available. DATABASE_HOST : Database server network address. DATABASE_PORT : Port on which database service is available. DATABASE_NAME : Schema name available for the service. DATABASE_USER : Username for database authentication. DATABASE_PASSWORD : User password for database authentication. CALENDAR_API_URL : API URL providing dates handled for vacation appointments. If you have questions about how to set environment variables check these links: Environment Variables - Linux Environment Variables - Docker Observation : The system was developed to run in Linux and Docker environments. No official support for Windows. Development Installing VirtualEnvWrapper We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here . But you can also follow these steps below for installing the environment: 1 2 sudo python3 -m pip install -U pip # Update pip sudo python3 -m pip install virtualenvwrapper # Install virtualenvwrapper module Observation : If you do not have administrator access on the machine remove sudo from the beginning of the command and add the flag --user to the end of the command. Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following export : 1 export PROJECT_HOME = /path/to/project Run the shell startup file for the changes to take effect, for example: 1 source ~/.bashrc Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name vacation : 1 mkvirtualenv -p $( which python3 ) vacation To use it: 1 2 3 workon vacation sudo python3 -m pip install pipenv pipenv install # Will install all of the project dependencies Observaion : Again, if necessary, add the flag --user to make the pipenv package installation for the local user. Local Execution For local system execution, run the following command in the project root folder (assuming virtualenv is already active): 1 python src/main.py This will run the system on localhost and will be available on the HTTP_PORT port configured for the system. This way you can test new implementations. Tests To run the Vacation API tests follow the script below: Enable virtualenv vacation ; Ensure that the dependencies are installed, especially: 1 2 3 pytest pytest - coverage flake8 Run the commands below: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Set the python path as the project folder pytest src/ # Performs the tests pytest --cov = vacation src/ # Performs tests evaluating coverage pytest --cov = vacation --cov-report xml src/ # Generate the XML report of coverage flake8 src/ # Run PEP8 linter unset PYTHONPATH # Unset PYTHONPATH variable During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage . During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8 Build To build the API Vacation service just follow the script below: 1 docker build -t api-vacation:<version> . Setting the version on < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 and etc. Make sure you have logged in to the docker hub service. If you do not, run the docker login command. 1 docker push api-vacation:<version> Finally, if the system will be executed by the built container docker, execute: 1 docker run -d --name api-vacation -e .env api-vacation Observation : Assumes that the settings are listed in the .env file. For more settings, execution options, and supplemental documentation, go to Docker","title":"Vacation API"},{"location":"modules/api-vacation/#hr-system-vacation-api","text":"The Vacation API is responsible for querying and managing employee vacation data in the context of the organization's people management. The API was created out of the need for the human resources system, but it was designed to be used by other systems and services that require employee vacation information.","title":"HR System - Vacation API"},{"location":"modules/api-vacation/#dependencies","text":"Python 3.7.3 Flask 1.1.1","title":"Dependencies"},{"location":"modules/api-vacation/#configuration","text":"Vacation API configuration is done through operating system environment variables. Therefore the configuration must be done on the host or must be passed to the container environment. The available settings are: HTTP_PORT : HTTP port number on which the service will be available. DATABASE_HOST : Database server network address. DATABASE_PORT : Port on which database service is available. DATABASE_NAME : Schema name available for the service. DATABASE_USER : Username for database authentication. DATABASE_PASSWORD : User password for database authentication. CALENDAR_API_URL : API URL providing dates handled for vacation appointments. If you have questions about how to set environment variables check these links: Environment Variables - Linux Environment Variables - Docker Observation : The system was developed to run in Linux and Docker environments. No official support for Windows.","title":"Configuration"},{"location":"modules/api-vacation/#development","text":"","title":"Development"},{"location":"modules/api-vacation/#installing-virtualenvwrapper","text":"We recommend using a virtual environment created by the virtualenvwrapper module. There is a virtual site with English instructions for installation that can be accessed here . But you can also follow these steps below for installing the environment: 1 2 sudo python3 -m pip install -U pip # Update pip sudo python3 -m pip install virtualenvwrapper # Install virtualenvwrapper module Observation : If you do not have administrator access on the machine remove sudo from the beginning of the command and add the flag --user to the end of the command. Now configure your shell to use virtualenvwrapper by adding these two lines to your shell initialization file (e.g. .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh If you want to add a specific project location (will automatically go to the project folder when the virtual environment is activated) just add a third line with the following export : 1 export PROJECT_HOME = /path/to/project Run the shell startup file for the changes to take effect, for example: 1 source ~/.bashrc Now create a virtual environment with the following command (entering the name you want for the environment), in this example I will use the name vacation : 1 mkvirtualenv -p $( which python3 ) vacation To use it: 1 2 3 workon vacation sudo python3 -m pip install pipenv pipenv install # Will install all of the project dependencies Observaion : Again, if necessary, add the flag --user to make the pipenv package installation for the local user.","title":"Installing VirtualEnvWrapper"},{"location":"modules/api-vacation/#local-execution","text":"For local system execution, run the following command in the project root folder (assuming virtualenv is already active): 1 python src/main.py This will run the system on localhost and will be available on the HTTP_PORT port configured for the system. This way you can test new implementations.","title":"Local Execution"},{"location":"modules/api-vacation/#tests","text":"To run the Vacation API tests follow the script below: Enable virtualenv vacation ; Ensure that the dependencies are installed, especially: 1 2 3 pytest pytest - coverage flake8 Run the commands below: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Set the python path as the project folder pytest src/ # Performs the tests pytest --cov = vacation src/ # Performs tests evaluating coverage pytest --cov = vacation --cov-report xml src/ # Generate the XML report of coverage flake8 src/ # Run PEP8 linter unset PYTHONPATH # Unset PYTHONPATH variable During the tests the terminal will display a output with the test report (failures, skips and successes) and the system test coverage. For other configurations and supplemental documentation go to pytest and coverage . During the lint process the terminal will report a bug report and warnings from the PEP8 style guide, for more configurations and additional documentation go to flake8 and PEP8","title":"Tests"},{"location":"modules/api-vacation/#build","text":"To build the API Vacation service just follow the script below: 1 docker build -t api-vacation:<version> . Setting the version on < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 and etc. Make sure you have logged in to the docker hub service. If you do not, run the docker login command. 1 docker push api-vacation:<version> Finally, if the system will be executed by the built container docker, execute: 1 docker run -d --name api-vacation -e .env api-vacation Observation : Assumes that the settings are listed in the .env file. For more settings, execution options, and supplemental documentation, go to Docker","title":"Build"},{"location":"modules/front-register/","text":"HR System - Register Web Web application for HR System Register. Built on AngularJS, it allows the user to make use of the HR API and manage HR workflows. Register Web features a user-friendly interface with the system. Register Web also provides information on system executions and data so that the user is able to find common information from an HR workflow. Dependencies Angular CLI 8.3.5 Yarn 1.17.3 Node.JS 10.16.3 Configuration Register Web configuration is done through operating system environment variables. Therefore the configuration must be done in the container environment settings. The available settings are: REGISTER_API : Register API URL. VACATION_API : Vacation API URL. PAYCHECK_API : Paycheck API URL. If you have questions about how to set environment variables check in: Environment Variables - Docker Observation : Remembering that the system was developed to run in Linux and Docker environments. No official support for Windows. Development Installing the Dependencies To install development dependencies make sure that the key project dependencies ( nodejs , angular - cli and yarn ) are installed. If so, just run the command below: 1 yarn install At this point yarn will install all packages present in the package . json file and create a node_modules folder with the dependency files. Observation : If you want to isolate nodejs versions and dependencies between projects, visit the NVM project website, a node version manager. Setting the Environment Variables For development execution you need to set the environment variables of the project. They are in the environment . ts file located at < project - path >/ src / environments , and should be set as follows: 1 2 3 4 5 6 export const environment = { production : false , REGISTER_API : \"https://0.0.0.0:1234/register/api\" , VACATION_API : \"https://0.0.0.0:1234/vacation/api\" , PAYCHECK_API : \"https://0.0.0.0:1234/paycheck/api\" , }; Remembering that REGISTER_API , VACATION_API and PAYCHECK_API must be the URL of the APIs deployed. Local Deploy For local system execution, follow the script below (assuming that the dependencies have been installed and the environment variables are properly set): 1 ng serve This will run the system on localhost and will be available at the address http : // 0 . 0 . 0 . 0 : 4200 / . This way you can test the new implementations and with each modification the application will reload the changes automatically. Tests Running Unit Tests To perform unit tests the system uses Karma , if the dependencies are already installed, simply run: 1 ng test If you only want to run once add the flag --watch=false . Otherwise the system will be watching for changes to test them. Running End-to-End Tests To perform end-to-end (E2E) testing the system uses Protractor , if the dependencies are already installed, simply run: 1 ng e2e Build To build the Register Web service just follow the script below: 1 docker build -t frint-register:<version> . Setting the version on < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 and etc. Make sure you have logged in to the docker hub service, if you do not run the docker login command. 1 docker push front-register:<version> Finally, if the system will be executed by the built docker container, execute: 1 docker run -d --name front-register -e .env front-register If you want to build the system through Angular CLI to serve via host instead of containers, use the following command: 1 ng build The build resources will be stored in the dist / folder. Use the --prod flag to build a production version. To execute simply serve via nginx or apache the resource present in the dist / folder to the web. Observation : Assumes that the settings are listed in the .env file. For more settings, execution options, and supplemental documentation, go to Docker","title":"Human Resources UI"},{"location":"modules/front-register/#hr-system-register-web","text":"Web application for HR System Register. Built on AngularJS, it allows the user to make use of the HR API and manage HR workflows. Register Web features a user-friendly interface with the system. Register Web also provides information on system executions and data so that the user is able to find common information from an HR workflow.","title":"HR System - Register Web"},{"location":"modules/front-register/#dependencies","text":"Angular CLI 8.3.5 Yarn 1.17.3 Node.JS 10.16.3","title":"Dependencies"},{"location":"modules/front-register/#configuration","text":"Register Web configuration is done through operating system environment variables. Therefore the configuration must be done in the container environment settings. The available settings are: REGISTER_API : Register API URL. VACATION_API : Vacation API URL. PAYCHECK_API : Paycheck API URL. If you have questions about how to set environment variables check in: Environment Variables - Docker Observation : Remembering that the system was developed to run in Linux and Docker environments. No official support for Windows.","title":"Configuration"},{"location":"modules/front-register/#development","text":"","title":"Development"},{"location":"modules/front-register/#installing-the-dependencies","text":"To install development dependencies make sure that the key project dependencies ( nodejs , angular - cli and yarn ) are installed. If so, just run the command below: 1 yarn install At this point yarn will install all packages present in the package . json file and create a node_modules folder with the dependency files. Observation : If you want to isolate nodejs versions and dependencies between projects, visit the NVM project website, a node version manager.","title":"Installing the Dependencies"},{"location":"modules/front-register/#setting-the-environment-variables","text":"For development execution you need to set the environment variables of the project. They are in the environment . ts file located at < project - path >/ src / environments , and should be set as follows: 1 2 3 4 5 6 export const environment = { production : false , REGISTER_API : \"https://0.0.0.0:1234/register/api\" , VACATION_API : \"https://0.0.0.0:1234/vacation/api\" , PAYCHECK_API : \"https://0.0.0.0:1234/paycheck/api\" , }; Remembering that REGISTER_API , VACATION_API and PAYCHECK_API must be the URL of the APIs deployed.","title":"Setting the Environment Variables"},{"location":"modules/front-register/#local-deploy","text":"For local system execution, follow the script below (assuming that the dependencies have been installed and the environment variables are properly set): 1 ng serve This will run the system on localhost and will be available at the address http : // 0 . 0 . 0 . 0 : 4200 / . This way you can test the new implementations and with each modification the application will reload the changes automatically.","title":"Local Deploy"},{"location":"modules/front-register/#tests","text":"","title":"Tests"},{"location":"modules/front-register/#running-unit-tests","text":"To perform unit tests the system uses Karma , if the dependencies are already installed, simply run: 1 ng test If you only want to run once add the flag --watch=false . Otherwise the system will be watching for changes to test them.","title":"Running Unit Tests"},{"location":"modules/front-register/#running-end-to-end-tests","text":"To perform end-to-end (E2E) testing the system uses Protractor , if the dependencies are already installed, simply run: 1 ng e2e","title":"Running End-to-End Tests"},{"location":"modules/front-register/#build","text":"To build the Register Web service just follow the script below: 1 docker build -t frint-register:<version> . Setting the version on < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 and etc. Make sure you have logged in to the docker hub service, if you do not run the docker login command. 1 docker push front-register:<version> Finally, if the system will be executed by the built docker container, execute: 1 docker run -d --name front-register -e .env front-register If you want to build the system through Angular CLI to serve via host instead of containers, use the following command: 1 ng build The build resources will be stored in the dist / folder. Use the --prod flag to build a production version. To execute simply serve via nginx or apache the resource present in the dist / folder to the web. Observation : Assumes that the settings are listed in the .env file. For more settings, execution options, and supplemental documentation, go to Docker","title":"Build"},{"location":"solution/about-rh/","text":"About HR Project The Human Resources system is a project for building a human resource management system for MARVEL 1 organization. It has functionalities to register employee data, their vacations and their payments, as well as to consult all this data. For the system user, the system has two macro requirements: To function as HR management system, and; Allow integration of other systems with the data managed on the system. This is a web-based system built on the Microservice Architecture , consisnting of various services and interfaces , as described in this documentation. Despite this modularization, the system is viewed by the user as a single software, so that the modularization is not perceived. Fictional Organization \u21a9","title":"About"},{"location":"solution/about-rh/#about-hr-project","text":"The Human Resources system is a project for building a human resource management system for MARVEL 1 organization. It has functionalities to register employee data, their vacations and their payments, as well as to consult all this data. For the system user, the system has two macro requirements: To function as HR management system, and; Allow integration of other systems with the data managed on the system. This is a web-based system built on the Microservice Architecture , consisnting of various services and interfaces , as described in this documentation. Despite this modularization, the system is viewed by the user as a single software, so that the modularization is not perceived. Fictional Organization \u21a9","title":"About HR Project"},{"location":"solution/architecture/","text":"Architectural Representation The following image architecturally represents how the components are arranged within the HR system. 1 This is the list of system components existing in the solution which have their documentation described in this documentation: Auth API Paycheck API Register API Vacation API HR UI If you'd like to see the each API interfaces, go to: Interface - Auth API Interface - Paycheck API Interface - Register API Interface - Vacation API HR Software Architectural Diagram (SOURCE: Jo\u00e3o Pedro Sconetto) \u21a9","title":"Architecture"},{"location":"solution/architecture/#architectural-representation","text":"The following image architecturally represents how the components are arranged within the HR system. 1 This is the list of system components existing in the solution which have their documentation described in this documentation: Auth API Paycheck API Register API Vacation API HR UI If you'd like to see the each API interfaces, go to: Interface - Auth API Interface - Paycheck API Interface - Register API Interface - Vacation API HR Software Architectural Diagram (SOURCE: Jo\u00e3o Pedro Sconetto) \u21a9","title":"Architectural Representation"}]}