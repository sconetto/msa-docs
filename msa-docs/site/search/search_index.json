{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MSA Docs Neste reposit\u00f3rio encontra-se a inst\u00e2ncia da proposta de documenta\u00e7\u00e3o de microsservi\u00e7os do artigo Microservices Documentation Proposal 1 . Logo a navega\u00e7\u00e3o representa uma inst\u00e2ncia num estudo de caso da API RH, no qual foi objeto de teste para a constru\u00e7\u00e3o do artigo, assim como a valida\u00e7\u00e3o do framework . Abaixo est\u00e1 representado a estrutura dos documentos presentes neste sistema. Estrutura da Documenta\u00e7\u00e3o Solu\u00e7\u00e3o - Documenta\u00e7\u00e3o do n\u00edvel de solu\u00e7\u00e3o do projeto de software. M\u00f3dulos - Documenta\u00e7\u00e3o dos m\u00f3dulos individuais da arquitetura. Interface - Documenta\u00e7\u00e3o das interfaces dos m\u00f3dulos e as intera\u00e7\u00f5es do sistema. Inserir o link do texto completo do artigo. \u21a9","title":"Home"},{"location":"#msa-docs","text":"Neste reposit\u00f3rio encontra-se a inst\u00e2ncia da proposta de documenta\u00e7\u00e3o de microsservi\u00e7os do artigo Microservices Documentation Proposal 1 . Logo a navega\u00e7\u00e3o representa uma inst\u00e2ncia num estudo de caso da API RH, no qual foi objeto de teste para a constru\u00e7\u00e3o do artigo, assim como a valida\u00e7\u00e3o do framework . Abaixo est\u00e1 representado a estrutura dos documentos presentes neste sistema.","title":"MSA Docs"},{"location":"#estrutura-da-documentacao","text":"Solu\u00e7\u00e3o - Documenta\u00e7\u00e3o do n\u00edvel de solu\u00e7\u00e3o do projeto de software. M\u00f3dulos - Documenta\u00e7\u00e3o dos m\u00f3dulos individuais da arquitetura. Interface - Documenta\u00e7\u00e3o das interfaces dos m\u00f3dulos e as intera\u00e7\u00f5es do sistema. Inserir o link do texto completo do artigo. \u21a9","title":"Estrutura da Documenta\u00e7\u00e3o"},{"location":"interfaces/api-auth/","text":"Auth Auth is a API using Keycloack and JWT to authenticate and manage users in the RH App Domain. You can view his documentation over at API Auth Module . Auth API Root [/] This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details. Retrieve the Entry Point [GET] Response 200 (application/json) 1 2 3 4 { \"session\" : \"/session\" \"user\" : \"/user\" } Group Session Resources related to sessions in the API. Session [/session] A Session object has the following attributes: email password Create a new Session [POST] You may create a new session using this action. It takes a JSON object containing the user identifer and his password. email (string) - The user e-mail password (string) - The user password for authentication Request (application/json) 1 2 3 4 { \"email\" : \"miles.morales@email.com\" \"password\" : \"spidermanrules!\" } Response 201 (application/json) Body 1 2 3 { \"access_token\" : eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9 . eyJlbWFpbCI6Im1pbGVzLm1vcmFsZXNAZW1haWwuY29tIiwicGFzc3dvcmQiOiJzcGlkZXJtYW5ydWxlcyEiLCJqdGkiOiJmZTllN2Y1NC0zNTIzLTRhYTgtOTg5Yi1kYzhhM2RkYjA3ODYiLCJpYXQiOjE1Njk1MDg3NDQsImV4cCI6MTU2OTUxMjM0NH0 . K - rncSvY9v - x2tQC0cIekhw4yqGfW3i4MEyIS1ljn54 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Response 404 (application/json) Body 1 2 3 { \"message\" : \"User not found!\" } User Session Resources related to users in the API User [/user/{user_id}] A User object has the following attributes: name created_at - A RFC3339 date when the user was created. updated_at - A RFC339 date when the user was updated. email - A string with user e-mail groups - An array of groups identifiers which user has access. url Parameters user_id: 1 (required [some routes], uuid) - ID of the User in form of an UUID View a User Detail [GET] Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 { \"name\" : \"Peter Parker\" , \"created_at\" : \"2014-11-11T08:40:51.620Z\" , \"updated_at\" : \"2018-08-21T21:16:09.712Z\" , \"email\" : \"peter.parker@email.com\" , \"groups\" : [ \"worker\", \"heroes\" ] \"url\" : \"/user/83883e79-65f1-42bc-82ce-33615b47fcca\" , } Create a new User [POST] You may create a new user (if you have this permission) using this action. It takes a JSON object containing a user and all his infos. On this action you don't have to add { user_id } in the URL. name (string) - The user name email (string) - The user e-mail groups (array[string]) - The list of groups which the user will have access Request (application/json) 1 2 3 4 5 6 7 8 9 { \"name\" : \"Miles Morales\" , \"email\" : \"miles.morales@email.com\" \"groups\" : [ \"workers\", \"heroes\", \"admins\" ] } Response 201 (application/json) Headers 1 Location : / user / ad609b8d - ae9b - 4487 - bff4 - 8 b1f995a323d Body 1 2 3 4 5 6 7 8 9 10 11 { \"name\" : \"Miles Morales\" , \"created_at\" : \"2019-09-25T12:01:41.091Z\" , \"updated_at\" : \"2019-09-25T12:01:41.091Z\" , \"email\" : \"miles.morales@email.com\" , \"groups\" : [ \"worker\", \"heroes\", \"admins\" ] \"url\" : \"/user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\" , } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Update a User [PATCH] You may update a user info (if you are the user or if you have this permission) using this action. It takes a JSON object containing a user and all the infos you want to update. name (string) - The user name (optional) email (string) - The user e-mail (optional) groups (array[string]) - The list of groups which the user will have access (optinal) Request (application/json) 1 2 3 4 5 6 { \"groups\" : [ \"workers\" , \"heroes\" ] } Response 201 (application/json) Headers 1 Location : / user / ad609b8d - ae9b - 4487 - bff4 - 8 b1f995a323d Body 1 2 3 4 5 6 7 8 9 10 11 { \"name\" : \"Miles Morales\" , \"created_at\" : \"2019-09-25T12:01:41.091Z\" , \"updated_at\" : \"2019-09-26T08:15:38.920Z\" , \"email\" : \"miles.morales@email.com\" , \"groups\" : [ \"worker\", \"heroes\" ] \"url\" : \"/user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\" , } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Remove a User [DELETE] You may remove a user (if you have this permission) using this action. Response 200 Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Auth API Blueprint"},{"location":"interfaces/api-auth/#auth","text":"Auth is a API using Keycloack and JWT to authenticate and manage users in the RH App Domain. You can view his documentation over at API Auth Module .","title":"Auth"},{"location":"interfaces/api-auth/#auth-api-root","text":"This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.","title":"Auth API Root [/]"},{"location":"interfaces/api-auth/#retrieve-the-entry-point-get","text":"Response 200 (application/json) 1 2 3 4 { \"session\" : \"/session\" \"user\" : \"/user\" }","title":"Retrieve the Entry Point [GET]"},{"location":"interfaces/api-auth/#group-session","text":"Resources related to sessions in the API.","title":"Group Session"},{"location":"interfaces/api-auth/#session-session","text":"A Session object has the following attributes: email password","title":"Session [/session]"},{"location":"interfaces/api-auth/#create-a-new-session-post","text":"You may create a new session using this action. It takes a JSON object containing the user identifer and his password. email (string) - The user e-mail password (string) - The user password for authentication Request (application/json) 1 2 3 4 { \"email\" : \"miles.morales@email.com\" \"password\" : \"spidermanrules!\" } Response 201 (application/json) Body 1 2 3 { \"access_token\" : eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9 . eyJlbWFpbCI6Im1pbGVzLm1vcmFsZXNAZW1haWwuY29tIiwicGFzc3dvcmQiOiJzcGlkZXJtYW5ydWxlcyEiLCJqdGkiOiJmZTllN2Y1NC0zNTIzLTRhYTgtOTg5Yi1kYzhhM2RkYjA3ODYiLCJpYXQiOjE1Njk1MDg3NDQsImV4cCI6MTU2OTUxMjM0NH0 . K - rncSvY9v - x2tQC0cIekhw4yqGfW3i4MEyIS1ljn54 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Response 404 (application/json) Body 1 2 3 { \"message\" : \"User not found!\" }","title":"Create a new Session [POST]"},{"location":"interfaces/api-auth/#user-session","text":"Resources related to users in the API","title":"User Session"},{"location":"interfaces/api-auth/#user-useruser_id","text":"A User object has the following attributes: name created_at - A RFC3339 date when the user was created. updated_at - A RFC339 date when the user was updated. email - A string with user e-mail groups - An array of groups identifiers which user has access. url Parameters user_id: 1 (required [some routes], uuid) - ID of the User in form of an UUID","title":"User [/user/{user_id}]"},{"location":"interfaces/api-auth/#view-a-user-detail-get","text":"Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 { \"name\" : \"Peter Parker\" , \"created_at\" : \"2014-11-11T08:40:51.620Z\" , \"updated_at\" : \"2018-08-21T21:16:09.712Z\" , \"email\" : \"peter.parker@email.com\" , \"groups\" : [ \"worker\", \"heroes\" ] \"url\" : \"/user/83883e79-65f1-42bc-82ce-33615b47fcca\" , }","title":"View a User Detail [GET]"},{"location":"interfaces/api-auth/#create-a-new-user-post","text":"You may create a new user (if you have this permission) using this action. It takes a JSON object containing a user and all his infos. On this action you don't have to add { user_id } in the URL. name (string) - The user name email (string) - The user e-mail groups (array[string]) - The list of groups which the user will have access Request (application/json) 1 2 3 4 5 6 7 8 9 { \"name\" : \"Miles Morales\" , \"email\" : \"miles.morales@email.com\" \"groups\" : [ \"workers\", \"heroes\", \"admins\" ] } Response 201 (application/json) Headers 1 Location : / user / ad609b8d - ae9b - 4487 - bff4 - 8 b1f995a323d Body 1 2 3 4 5 6 7 8 9 10 11 { \"name\" : \"Miles Morales\" , \"created_at\" : \"2019-09-25T12:01:41.091Z\" , \"updated_at\" : \"2019-09-25T12:01:41.091Z\" , \"email\" : \"miles.morales@email.com\" , \"groups\" : [ \"worker\", \"heroes\", \"admins\" ] \"url\" : \"/user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\" , } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Create a new User [POST]"},{"location":"interfaces/api-auth/#update-a-user-patch","text":"You may update a user info (if you are the user or if you have this permission) using this action. It takes a JSON object containing a user and all the infos you want to update. name (string) - The user name (optional) email (string) - The user e-mail (optional) groups (array[string]) - The list of groups which the user will have access (optinal) Request (application/json) 1 2 3 4 5 6 { \"groups\" : [ \"workers\" , \"heroes\" ] } Response 201 (application/json) Headers 1 Location : / user / ad609b8d - ae9b - 4487 - bff4 - 8 b1f995a323d Body 1 2 3 4 5 6 7 8 9 10 11 { \"name\" : \"Miles Morales\" , \"created_at\" : \"2019-09-25T12:01:41.091Z\" , \"updated_at\" : \"2019-09-26T08:15:38.920Z\" , \"email\" : \"miles.morales@email.com\" , \"groups\" : [ \"worker\", \"heroes\" ] \"url\" : \"/user/ad609b8d-ae9b-4487-bff4-8b1f995a323d\" , } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Update a User [PATCH]"},{"location":"interfaces/api-auth/#remove-a-user-delete","text":"You may remove a user (if you have this permission) using this action. Response 200 Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Remove a User [DELETE]"},{"location":"interfaces/api-paycheck/","text":"Paycheck Paycheck is a API used to manage all workers paycheck, benefits and others questions related to wage. You can view his documentation over at API Paycheck Module . Paycheck API Root [/] This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details. Retrieve the Entry Point [GET] Response 200 (application/json) 1 2 3 { \"paycheck\" : \"/payroll\" } Group Payroll Resources related to questions in the API. Payroll [/payroll/{year}/{month}/{payroll_number}{?{filter}={value}&}] A Payroll object has the following attributes: payroll_number year month status employees payment Parameters payroll_number: 1 (optional, number) - Number of the Payroll in form of an integer year: 2019 (optional, number) - The year of the Payroll month: 2 (optional, number) - The month of the Payroll status: true (optional, boolean) - The status of the paycheck (true if active, false otherwise) View a Payroll Details [GET] Request (URL) 1 URL : / payroll / 2019 / 8 / 1 ? status = true Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 8 , \"status\" : true , \"employees\" : [ \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 1 . 99 , 1 . 99 ] } Create a new Payroll [POST] You may create a new payroll (if you have this permission) using this action. It takes a URL with the creation parameters. If there is a payroll for the given year and month, a new one will be created and the last one will be deactivated. year (number) - The year of the Payroll month (string) - The month of the Payroll Request (URL) 1 URL : / payroll / 2019 / 9 Response 200 (application/json) 1 2 3 4 5 6 7 8 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : null , \"payment\" : null , } Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"new_payroll\" : { \"payroll_number\" : 2 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : null , \"payment\" : null , } , \"old_payroll\" : { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : [ \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 1 . 99 , 1 . 99 ] } } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Update information on the Payroll [PATCH] You may update the payroll (if you have this permission) using this action. It takes a JSON with the objects you want to update. The updatable parameters are the following (if the objects is already fullfiled it will be overwrited): status (boolean) - The status of the paycheck employees (array[string]) - The list of employees that will be payed on that payroll payment (array[float]) - The value of the employees salary Request (URL) 1 URL : / payroll / 2019 / 9 / 2 Request (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 { \"employees\" : [ \"Steve Rogers\" , \"Miles Morales\" , \"Peter Parker\" ], \" payment : [ 3 . 99 , 1 . 99 , 1 . 99 ] } Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : [ \"Steve Rogers\" , \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 3 . 99 , 1 . 99 , 1 . 99 ] } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Delete Payroll [DELETE] You may create a new payroll (if you have this permission) using this action. It takes a URL with the search to delete parameters. Caution, this action is irreversible. Request (URL) 1 2 3 4 5 URL : / payroll / 2019 / 9 / 2 OR URL : / payroll / 2019 ? month = 9 & status = false Response 200 (application/json) Body 1 2 3 4 5 6 7 8 9 { \"deleted_payrolls\" : [ 2 ] } OR { \"deleted_payrolls\" : [ 2 , 3 ] } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Paycheck API Blueprint"},{"location":"interfaces/api-paycheck/#paycheck","text":"Paycheck is a API used to manage all workers paycheck, benefits and others questions related to wage. You can view his documentation over at API Paycheck Module .","title":"Paycheck"},{"location":"interfaces/api-paycheck/#paycheck-api-root","text":"This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.","title":"Paycheck API Root [/]"},{"location":"interfaces/api-paycheck/#retrieve-the-entry-point-get","text":"Response 200 (application/json) 1 2 3 { \"paycheck\" : \"/payroll\" }","title":"Retrieve the Entry Point [GET]"},{"location":"interfaces/api-paycheck/#group-payroll","text":"Resources related to questions in the API.","title":"Group Payroll"},{"location":"interfaces/api-paycheck/#payroll-payrollyearmonthpayroll_numberfiltervalue","text":"A Payroll object has the following attributes: payroll_number year month status employees payment Parameters payroll_number: 1 (optional, number) - Number of the Payroll in form of an integer year: 2019 (optional, number) - The year of the Payroll month: 2 (optional, number) - The month of the Payroll status: true (optional, boolean) - The status of the paycheck (true if active, false otherwise)","title":"Payroll [/payroll/{year}/{month}/{payroll_number}{?{filter}={value}&amp;}]"},{"location":"interfaces/api-paycheck/#view-a-payroll-details-get","text":"Request (URL) 1 URL : / payroll / 2019 / 8 / 1 ? status = true Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 8 , \"status\" : true , \"employees\" : [ \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 1 . 99 , 1 . 99 ] }","title":"View a Payroll Details [GET]"},{"location":"interfaces/api-paycheck/#create-a-new-payroll-post","text":"You may create a new payroll (if you have this permission) using this action. It takes a URL with the creation parameters. If there is a payroll for the given year and month, a new one will be created and the last one will be deactivated. year (number) - The year of the Payroll month (string) - The month of the Payroll Request (URL) 1 URL : / payroll / 2019 / 9 Response 200 (application/json) 1 2 3 4 5 6 7 8 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : null , \"payment\" : null , } Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"new_payroll\" : { \"payroll_number\" : 2 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : null , \"payment\" : null , } , \"old_payroll\" : { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : [ \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 1 . 99 , 1 . 99 ] } } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Create a new Payroll [POST]"},{"location":"interfaces/api-paycheck/#update-information-on-the-payroll-patch","text":"You may update the payroll (if you have this permission) using this action. It takes a JSON with the objects you want to update. The updatable parameters are the following (if the objects is already fullfiled it will be overwrited): status (boolean) - The status of the paycheck employees (array[string]) - The list of employees that will be payed on that payroll payment (array[float]) - The value of the employees salary Request (URL) 1 URL : / payroll / 2019 / 9 / 2 Request (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 { \"employees\" : [ \"Steve Rogers\" , \"Miles Morales\" , \"Peter Parker\" ], \" payment : [ 3 . 99 , 1 . 99 , 1 . 99 ] } Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"payroll_number\" : 1 , \"year\" : 2019 , \"month\" : 9 , \"status\" : true , \"employees\" : [ \"Steve Rogers\" , \"Miles Morales\" , \"Peter Parker\" ], \"payment\" : [ 3 . 99 , 1 . 99 , 1 . 99 ] } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Update information on the Payroll [PATCH]"},{"location":"interfaces/api-paycheck/#delete-payroll-delete","text":"You may create a new payroll (if you have this permission) using this action. It takes a URL with the search to delete parameters. Caution, this action is irreversible. Request (URL) 1 2 3 4 5 URL : / payroll / 2019 / 9 / 2 OR URL : / payroll / 2019 ? month = 9 & status = false Response 200 (application/json) Body 1 2 3 4 5 6 7 8 9 { \"deleted_payrolls\" : [ 2 ] } OR { \"deleted_payrolls\" : [ 2 , 3 ] } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Delete Payroll [DELETE]"},{"location":"interfaces/api-register/","text":"Register Register is a simple API to manage employees. You can view this documentation over at API Vacation Module . Register API Root [/] This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details. Retrieve the Entry Point [GET] Response 200 (application/json) 1 2 3 4 { \"employee\" : \"/employee\" , \"relative\" : \"/relative\" } Group Employee Resources related to employees in the API. Employee [/employee/{register}] A Employee object has the following attributes: register hired_at - An RFC3339 date when the employee was hired. fired_at - An RFC3339 date when the employee was fired, if don't null. name - The name of the employee position - The name of the employee position gross_salary - The gross amount of the employee salary in form of a float Parameters register: 1 (required, number) - ID of the Employee in form of an integer View a Employee Detail [GET] Response 200 (application/json) 1 2 3 4 5 6 7 8 { \"register\" : 1 , \"hired_at\" : \"1962-08-15T08:00:00.000Z\" , \"fired_at\" : null , \"name\" : \"Peter Parker\" , \"position\" : \"Friendly Neighborhood\" , \"gross_salary\" : 1 . 99 } Hire a New Employee [POST] You may hire a new employee (if you have this permission) using this action. It takes a JSON object containing a employee and his infos. On this action you don't have to add { register } in the URL. name (string) - The employee name position (string) - The employee position gross_salary (float) - The employee gross salary Request (application/json) 1 2 3 4 5 { \"name\" : \"Nick Fury\" , \"position\" : \"SHIELD Leader\" , \"gross_salary\" : 99999 . 99 } Response 201 (application/json) Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : null , \"position\" : \"SHIELD Leader\" , \"gross_salary\" : 99999 . 99 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Update a Employee [PATCH] You may update a employee information (if you have this permission) using this action. It takes a JSON object containing a employee and the info that you want to update. name (string) - The employee name position (string) - The employee position gross_salary (float) - The employee gross salary Request (application/json) 1 2 3 4 { \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 201 (application/json) Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 , \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : null , \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Fire a Employee [DELETE] You may fire a employee (if you have this permission) using this action. His information will remain in the system but the fired_at attribute will receive the date of the action. Response 200 Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 , \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : \"2020-09-30T08:01:12.812Z\" , \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Group Relative Resources related to relatives in the API. Relative [/relative/{employee_register}/{id}] A Relative object has the following attributes: employee_register id name kinship Parameters employee_register: 1 (required, number) - ID of the employee which is related to the relative in form of an integer id: 1 (required, number) - ID of the relative in form of an integer View a Relative Detail [GET] Response 200 (application/json) 1 2 3 4 5 6 { \"employee_register\" : 1 , \"id\" : 1 , \"name\" : \"May Parker\" , \"kinship\" : \"Aunt\" } Add a New Relative [POST] You may add a new relative (if you have this permission) using this action. It takes a JSON object containing a relative and his infos. On this action you don't have to add the relative { id } in the URL, only the { employee_register } . name (string) - The relative name kinship (string) - The relative kinship type name Request (application/json) 1 2 3 4 { \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Wife\" } Response 201 (application/json) Headers 1 Location : / relative / 1 / 2 Body 1 2 3 4 5 6 { \"id\" : 2 , \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Wife\" } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Update a Relative [PATCH] You may update a relative information (if you have this permission) using this action. It takes a JSON object containing a relative and the info that you want to update. name (string) - The relative name kinship (string) - The relative kinship type name Request (application/json) 1 2 3 4 { \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } Response 201 (application/json) Headers 1 Location : / relative / 1 / 2 Body 1 2 3 4 5 6 { \"id\" : 2 , \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Remove a Relative [DELETE] You may remove a relative (if you have this permission) using this action. Response 200 Headers 1 Location : / relative / 1 Body 1 2 3 4 5 6 7 { \"old_value\" : { \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } } Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Register API Blueprint"},{"location":"interfaces/api-register/#register","text":"Register is a simple API to manage employees. You can view this documentation over at API Vacation Module .","title":"Register"},{"location":"interfaces/api-register/#register-api-root","text":"This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.","title":"Register API Root [/]"},{"location":"interfaces/api-register/#retrieve-the-entry-point-get","text":"Response 200 (application/json) 1 2 3 4 { \"employee\" : \"/employee\" , \"relative\" : \"/relative\" }","title":"Retrieve the Entry Point [GET]"},{"location":"interfaces/api-register/#group-employee","text":"Resources related to employees in the API.","title":"Group Employee"},{"location":"interfaces/api-register/#employee-employeeregister","text":"A Employee object has the following attributes: register hired_at - An RFC3339 date when the employee was hired. fired_at - An RFC3339 date when the employee was fired, if don't null. name - The name of the employee position - The name of the employee position gross_salary - The gross amount of the employee salary in form of a float Parameters register: 1 (required, number) - ID of the Employee in form of an integer","title":"Employee [/employee/{register}]"},{"location":"interfaces/api-register/#view-a-employee-detail-get","text":"Response 200 (application/json) 1 2 3 4 5 6 7 8 { \"register\" : 1 , \"hired_at\" : \"1962-08-15T08:00:00.000Z\" , \"fired_at\" : null , \"name\" : \"Peter Parker\" , \"position\" : \"Friendly Neighborhood\" , \"gross_salary\" : 1 . 99 }","title":"View a Employee Detail [GET]"},{"location":"interfaces/api-register/#hire-a-new-employee-post","text":"You may hire a new employee (if you have this permission) using this action. It takes a JSON object containing a employee and his infos. On this action you don't have to add { register } in the URL. name (string) - The employee name position (string) - The employee position gross_salary (float) - The employee gross salary Request (application/json) 1 2 3 4 5 { \"name\" : \"Nick Fury\" , \"position\" : \"SHIELD Leader\" , \"gross_salary\" : 99999 . 99 } Response 201 (application/json) Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : null , \"position\" : \"SHIELD Leader\" , \"gross_salary\" : 99999 . 99 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Hire a New Employee [POST]"},{"location":"interfaces/api-register/#update-a-employee-patch","text":"You may update a employee information (if you have this permission) using this action. It takes a JSON object containing a employee and the info that you want to update. name (string) - The employee name position (string) - The employee position gross_salary (float) - The employee gross salary Request (application/json) 1 2 3 4 { \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 201 (application/json) Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 , \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : null , \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Update a Employee [PATCH]"},{"location":"interfaces/api-register/#fire-a-employee-delete","text":"You may fire a employee (if you have this permission) using this action. His information will remain in the system but the fired_at attribute will receive the date of the action. Response 200 Headers 1 Location : / employee / 4 Body 1 2 3 4 5 6 7 8 { \"register\" : 4 , \"name\" : \"Nick Fury\" , \"hired_at\" : \"2019-09-30T11:30:41.789Z\" , \"fired_at\" : \"2020-09-30T08:01:12.812Z\" , \"position\" : \"SHIELD Chief\" , \"gross_salary\" : 9999999 . 99 } Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Fire a Employee [DELETE]"},{"location":"interfaces/api-register/#group-relative","text":"Resources related to relatives in the API.","title":"Group Relative"},{"location":"interfaces/api-register/#relative-relativeemployee_registerid","text":"A Relative object has the following attributes: employee_register id name kinship Parameters employee_register: 1 (required, number) - ID of the employee which is related to the relative in form of an integer id: 1 (required, number) - ID of the relative in form of an integer","title":"Relative [/relative/{employee_register}/{id}]"},{"location":"interfaces/api-register/#view-a-relative-detail-get","text":"Response 200 (application/json) 1 2 3 4 5 6 { \"employee_register\" : 1 , \"id\" : 1 , \"name\" : \"May Parker\" , \"kinship\" : \"Aunt\" }","title":"View a Relative Detail [GET]"},{"location":"interfaces/api-register/#add-a-new-relative-post","text":"You may add a new relative (if you have this permission) using this action. It takes a JSON object containing a relative and his infos. On this action you don't have to add the relative { id } in the URL, only the { employee_register } . name (string) - The relative name kinship (string) - The relative kinship type name Request (application/json) 1 2 3 4 { \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Wife\" } Response 201 (application/json) Headers 1 Location : / relative / 1 / 2 Body 1 2 3 4 5 6 { \"id\" : 2 , \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Wife\" } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Add a New Relative [POST]"},{"location":"interfaces/api-register/#update-a-relative-patch","text":"You may update a relative information (if you have this permission) using this action. It takes a JSON object containing a relative and the info that you want to update. name (string) - The relative name kinship (string) - The relative kinship type name Request (application/json) 1 2 3 4 { \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } Response 201 (application/json) Headers 1 Location : / relative / 1 / 2 Body 1 2 3 4 5 6 { \"id\" : 2 , \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Update a Relative [PATCH]"},{"location":"interfaces/api-register/#remove-a-relative-delete","text":"You may remove a relative (if you have this permission) using this action. Response 200 Headers 1 Location : / relative / 1 Body 1 2 3 4 5 6 7 { \"old_value\" : { \"employee_register\" : 1 , \"name\" : \"Mary Jane Watson\" , \"kinship\" : \"Ex-Wife\" } } Response 401 Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Remove a Relative [DELETE]"},{"location":"interfaces/api-vacation/","text":"Vacation Vacation is a simple API to manage employees vacations and vacation scheduling. You can view this documentation over at API Vacation Module . Vacation API Root [/] This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details. Retrieve the Entry Point [GET] Response 200 (application/json) 1 2 3 { \"vacation\" : \"/vacation\" } Group Vacation Resources related to questions in the API. Vacation [/vacation/{year}/{month}] A Question object has the following attributes: year - An integer representing the year month - An integer representing the month number_employees - An integer representing how many employees have vacation employees - An array of Employees objects with vacation info Parameters year: 2019 (required, number) - Given vacation year month: 9 (required, number) - Given vacation month View a Vacation Detail [GET] Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \" year \" : 2019 , \" month \" : \" september \" , \" number_employees \" : 2 , \" employees \" : [ { \" register \" : 1 , \" name \" : \" Peter Parker \" , \" start \" : \" 2019-09-01 \" , \" end \" : \" 2019-09-15 \" }, { \" register \" : 2 , \" name \" : \" Miles Morales \" , \" start \" : \" 2019-09-15 \" , \" end \" : \" 2019-09-30 \" } ] } Create/Update a Employee Vacation [POST] You may create/update a employee vacation (if you have this permission) using this action. It takes a JSON object containing a employee and all vacation infos. If the employee with the given register already exist this action will override the information. The employee-vacation object have the following structure. register (integer) - The employee register name (string) - The employee name start (date) - The start date of the employee vacation end (date) - The end date of the employee vacation Request (application/json) 1 2 3 4 5 6 { \" register \" : 3 \" name \" : \" Tony Stark \" , \" start \" : \" 2019-09-01 \" , \" end \" : \" 2019-09-30 \" } Response 201 (application/json) Headers 1 Location : / vacation / 2019 / 9 Body 1 2 3 4 5 { \"year\" : 2019 , \"month\" : \"september\" , \"number_employees\" : 3 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" } Remove a Employee Vacation You may remove a employee vacation (if you have this permission) using this action. It takes a JSON object containing a employee register. The employee-vacation object have the following structure. register (integer or array[integer]) - The employee register Request (application/json) 1 2 3 { \"register\" : [ 2 , 3 ] } Response 201 (application/json) Headers 1 Location : / vacation / 2019 / 9 Body 1 2 3 4 5 { \"year\" : 2019 , \"month\" : \"september\" , \"number_employees\" : 1 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Vacation API Blueprint"},{"location":"interfaces/api-vacation/#vacation","text":"Vacation is a simple API to manage employees vacations and vacation scheduling. You can view this documentation over at API Vacation Module .","title":"Vacation"},{"location":"interfaces/api-vacation/#vacation-api-root","text":"This resource does not have any attributes. Instead it offers the initial API affordances in the form of the links in the JSON body. It is recommend to follow the \u201curl\u201d link values, Link or Location headers where applicable to retrieve resources. Instead of constructing your own URLs, to keep your client decoupled from implementation details.","title":"Vacation API Root [/]"},{"location":"interfaces/api-vacation/#retrieve-the-entry-point-get","text":"Response 200 (application/json) 1 2 3 { \"vacation\" : \"/vacation\" }","title":"Retrieve the Entry Point [GET]"},{"location":"interfaces/api-vacation/#group-vacation","text":"Resources related to questions in the API.","title":"Group Vacation"},{"location":"interfaces/api-vacation/#vacation-vacationyearmonth","text":"A Question object has the following attributes: year - An integer representing the year month - An integer representing the month number_employees - An integer representing how many employees have vacation employees - An array of Employees objects with vacation info Parameters year: 2019 (required, number) - Given vacation year month: 9 (required, number) - Given vacation month","title":"Vacation [/vacation/{year}/{month}]"},{"location":"interfaces/api-vacation/#view-a-vacation-detail-get","text":"Response 200 (application/json) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \" year \" : 2019 , \" month \" : \" september \" , \" number_employees \" : 2 , \" employees \" : [ { \" register \" : 1 , \" name \" : \" Peter Parker \" , \" start \" : \" 2019-09-01 \" , \" end \" : \" 2019-09-15 \" }, { \" register \" : 2 , \" name \" : \" Miles Morales \" , \" start \" : \" 2019-09-15 \" , \" end \" : \" 2019-09-30 \" } ] }","title":"View a Vacation Detail [GET]"},{"location":"interfaces/api-vacation/#createupdate-a-employee-vacation-post","text":"You may create/update a employee vacation (if you have this permission) using this action. It takes a JSON object containing a employee and all vacation infos. If the employee with the given register already exist this action will override the information. The employee-vacation object have the following structure. register (integer) - The employee register name (string) - The employee name start (date) - The start date of the employee vacation end (date) - The end date of the employee vacation Request (application/json) 1 2 3 4 5 6 { \" register \" : 3 \" name \" : \" Tony Stark \" , \" start \" : \" 2019-09-01 \" , \" end \" : \" 2019-09-30 \" } Response 201 (application/json) Headers 1 Location : / vacation / 2019 / 9 Body 1 2 3 4 5 { \"year\" : 2019 , \"month\" : \"september\" , \"number_employees\" : 3 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Create/Update a Employee Vacation [POST]"},{"location":"interfaces/api-vacation/#remove-a-employee-vacation","text":"You may remove a employee vacation (if you have this permission) using this action. It takes a JSON object containing a employee register. The employee-vacation object have the following structure. register (integer or array[integer]) - The employee register Request (application/json) 1 2 3 { \"register\" : [ 2 , 3 ] } Response 201 (application/json) Headers 1 Location : / vacation / 2019 / 9 Body 1 2 3 4 5 { \"year\" : 2019 , \"month\" : \"september\" , \"number_employees\" : 1 } Response 401 (application/json) Body 1 2 3 { \"message\" : \"You're not allowed to perform this action\" }","title":"Remove a Employee Vacation"},{"location":"modules/api-auth/","text":"API - Autentica\u00e7\u00e3o Ainda assim, existem d\u00favidas a respeito de como a determina\u00e7\u00e3o clara de objetivos acarreta um processo de reformula\u00e7\u00e3o e moderniza\u00e7\u00e3o das posturas dos \u00f3rg\u00e3os dirigentes com rela\u00e7\u00e3o \u00e0s suas atribui\u00e7\u00f5es. 1 Depend\u00eancias Python 3.7.3 Flask 1.1.1 python-keycloak 0.17.5 Configura\u00e7\u00e3o A configura\u00e7\u00e3o da API de Autentica\u00e7\u00e3o se d\u00e1 por meio de vari\u00e1veis de ambiente do sistema operacional. Portanto a configura\u00e7\u00e3o dever\u00e1 ser feita no host ou dever\u00e1 ser passada para o ambiente do container . As configura\u00e7\u00f5es dispon\u00edveis s\u00e3o: HTTP_PORT : N\u00famero da porta HTTP no qual o servi\u00e7o ser\u00e1 disponibilizado. DATABASE_HOST : Endere\u00e7o de rede do servidor do banco de dados. DATABASE_PORT : Porta no qual o servi\u00e7o de banco de dados est\u00e1 dispon\u00edvel. DATABASE_NAME : Nome do schema dispon\u00edvel para o servi\u00e7o. DATABASE_USER : Nome do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. DATABASE_PASSWORD : Senha do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. KEYCLOAK_ADMIN : Nome do usu\u00e1rio administrador da API do Keycloak KEYCLOAK_PASSWORD : Senha do usu\u00e1rio para autentica\u00e7\u00e3o na API do Keycloak. Caso tenha d\u00favidas de como configurar vari\u00e1veis de ambiente verifique em: Vari\u00e1veis de Ambiente - Linux Vari\u00e1veis de Ambiente - Docker OBS : Lembrando que o sistema foi desenvolvido para execu\u00e7\u00e3o em ambientes Linux e Docker. N\u00e3o h\u00e1 suporte oficial para Windows. Desenvolvimento Instalando o VirtualEnvWrapper Recomendados a utiliza\u00e7\u00e3o de um ambiente virtual criado pelo m\u00f3dulo virtualenvwrapper. Existe um s\u00edtio virtual com instru\u00e7\u00f5es em ingl\u00eas para a instala\u00e7\u00e3o que pode ser acessado aqui . Mas voc\u00ea pode tamb\u00e9m seguir o roteiro abaixo para a instala\u00e7\u00e3o do ambiente: 1 2 sudo python3 -m pip install -U pip # Faz a atualiza\u00e7\u00e3o do pip sudo python3 -m pip install virtualenvwrapper # Instala o m\u00f3dulo virtualenvwrapper OBS : Caso n\u00e3o tenha acesso de administrador na m\u00e1quina remova o sudo do in\u00edcio do comando e adicione a flag --user ao final do comando. Agora configure o seu shell para utilizar o virtualenvwrapper , adicionando essas duas linhas ao arquivo de inicializa\u00e7\u00e3o do seu shell ( .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh Caso queira adicionar um local espec\u00edfico de projeto basta adicionar uma terceira linha com o seguinte export : 1 export PROJECT_HOME = /path/to/project Execute o arquivo de inicializa\u00e7\u00e3o do shell para que as mudan\u00e7as surtam efeito, por exemplo: 1 source ~/.bashrc Agora crie um ambiente virtual com o seguinte comando (colocando o nome que deseja para o ambiente), neste exemplo usarei o nome auth : 1 mkvirtualenv -p $( which python3 ) auth Para utiliz\u00e1-lo: 1 2 3 workon auth sudo python3 -m pip install pipenv pipenv install # Ir\u00e1 instalar todas as depend\u00eancias usadas no projeto OBS: Novamente, caso necess\u00e1rio, adicione a flag --user para fazer a instala\u00e7\u00e3o do pacote do pipenv. Execu\u00e7\u00e3o Local Para execu\u00e7\u00e3o local do sistema, rode o seguinte comando na pasta ra\u00edz do projeto (considerando que a virtualenv j\u00e1 esteja ativa): 1 python src/main.py Com isso o sistema ser\u00e1 executado no localhost e estar\u00e1 dispon\u00edvel na porta HTTP_PORT configurada para o sistema. Dessa forma \u00e9 poss\u00edvel testar as novas implementa\u00e7\u00f5es. Testes Para executar os testes da API Auth siga o roteiro abaixo descrito: Ative a virtualenv auth ; Garanta que as depend\u00eancias estejam instaladas, principalmente: 1 2 3 pytest pytest - coverage flake8 Execute os comandos abaixo: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Define path do python pytest src/ # Executa os testes pytest --cov = auth src/ # Executa os testes avaliando a cobertura pytest --cov = auth --cov-report xml src/ # Gera o relat\u00f3rio em XML da cobertura flake8 src/ # Roda o linter do PEP8 unset PYTHONPATH # Remove a vari\u00e1vel PYTHONPATH Durante os testes o terminal apresentar\u00e1 um output com o relat\u00f3rio dos testes (falhas, skips e sucessos) e a cobertura de testes do sistema. Para outras configura\u00e7\u00f5es e documenta\u00e7\u00e3o complementar acesse pytest e coverage . Durante o processo de lint o terminal apresentar\u00e1 um relat\u00f3rio com erros e warnings do guia de estilo do PEP8, para mais configura\u00e7\u00f5es e a documenta\u00e7\u00e3o complementar acesse flake8 e PEP8 Constru\u00e7\u00e3o Para fazer a constru\u00e7\u00e3o do servi\u00e7o do API Auth basta seguir o roteiro abaixo: 1 docker build -t api-auth:<version> . Definindo a vers\u00e3o em < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 e etc. Verifique se foi feito o login no servi\u00e7o do docker hub , caso n\u00e3o execute o comando do docker login . 1 docker push api-auth:<version> Por fim, caso a execu\u00e7\u00e3o do sistema ser\u00e1 feita pelo container docker constru\u00eddo execute: 1 docker run -d --name api-auth -e .env api-auth OBS : Pressup\u00f5e que as configura\u00e7\u00f5es est\u00e3o listadas no arquivo .env . Para mais configura\u00e7\u00f5es, op\u00e7\u00f5es de execu\u00e7\u00e3o e a documenta\u00e7\u00e3o complementar acesse Docker Gerado no Lero Lero \u21a9","title":"API Auth"},{"location":"modules/api-auth/#api-autenticacao","text":"Ainda assim, existem d\u00favidas a respeito de como a determina\u00e7\u00e3o clara de objetivos acarreta um processo de reformula\u00e7\u00e3o e moderniza\u00e7\u00e3o das posturas dos \u00f3rg\u00e3os dirigentes com rela\u00e7\u00e3o \u00e0s suas atribui\u00e7\u00f5es. 1","title":"API - Autentica\u00e7\u00e3o"},{"location":"modules/api-auth/#dependencias","text":"Python 3.7.3 Flask 1.1.1 python-keycloak 0.17.5","title":"Depend\u00eancias"},{"location":"modules/api-auth/#configuracao","text":"A configura\u00e7\u00e3o da API de Autentica\u00e7\u00e3o se d\u00e1 por meio de vari\u00e1veis de ambiente do sistema operacional. Portanto a configura\u00e7\u00e3o dever\u00e1 ser feita no host ou dever\u00e1 ser passada para o ambiente do container . As configura\u00e7\u00f5es dispon\u00edveis s\u00e3o: HTTP_PORT : N\u00famero da porta HTTP no qual o servi\u00e7o ser\u00e1 disponibilizado. DATABASE_HOST : Endere\u00e7o de rede do servidor do banco de dados. DATABASE_PORT : Porta no qual o servi\u00e7o de banco de dados est\u00e1 dispon\u00edvel. DATABASE_NAME : Nome do schema dispon\u00edvel para o servi\u00e7o. DATABASE_USER : Nome do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. DATABASE_PASSWORD : Senha do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. KEYCLOAK_ADMIN : Nome do usu\u00e1rio administrador da API do Keycloak KEYCLOAK_PASSWORD : Senha do usu\u00e1rio para autentica\u00e7\u00e3o na API do Keycloak. Caso tenha d\u00favidas de como configurar vari\u00e1veis de ambiente verifique em: Vari\u00e1veis de Ambiente - Linux Vari\u00e1veis de Ambiente - Docker OBS : Lembrando que o sistema foi desenvolvido para execu\u00e7\u00e3o em ambientes Linux e Docker. N\u00e3o h\u00e1 suporte oficial para Windows.","title":"Configura\u00e7\u00e3o"},{"location":"modules/api-auth/#desenvolvimento","text":"","title":"Desenvolvimento"},{"location":"modules/api-auth/#instalando-o-virtualenvwrapper","text":"Recomendados a utiliza\u00e7\u00e3o de um ambiente virtual criado pelo m\u00f3dulo virtualenvwrapper. Existe um s\u00edtio virtual com instru\u00e7\u00f5es em ingl\u00eas para a instala\u00e7\u00e3o que pode ser acessado aqui . Mas voc\u00ea pode tamb\u00e9m seguir o roteiro abaixo para a instala\u00e7\u00e3o do ambiente: 1 2 sudo python3 -m pip install -U pip # Faz a atualiza\u00e7\u00e3o do pip sudo python3 -m pip install virtualenvwrapper # Instala o m\u00f3dulo virtualenvwrapper OBS : Caso n\u00e3o tenha acesso de administrador na m\u00e1quina remova o sudo do in\u00edcio do comando e adicione a flag --user ao final do comando. Agora configure o seu shell para utilizar o virtualenvwrapper , adicionando essas duas linhas ao arquivo de inicializa\u00e7\u00e3o do seu shell ( .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh Caso queira adicionar um local espec\u00edfico de projeto basta adicionar uma terceira linha com o seguinte export : 1 export PROJECT_HOME = /path/to/project Execute o arquivo de inicializa\u00e7\u00e3o do shell para que as mudan\u00e7as surtam efeito, por exemplo: 1 source ~/.bashrc Agora crie um ambiente virtual com o seguinte comando (colocando o nome que deseja para o ambiente), neste exemplo usarei o nome auth : 1 mkvirtualenv -p $( which python3 ) auth Para utiliz\u00e1-lo: 1 2 3 workon auth sudo python3 -m pip install pipenv pipenv install # Ir\u00e1 instalar todas as depend\u00eancias usadas no projeto OBS: Novamente, caso necess\u00e1rio, adicione a flag --user para fazer a instala\u00e7\u00e3o do pacote do pipenv.","title":"Instalando o VirtualEnvWrapper"},{"location":"modules/api-auth/#execucao-local","text":"Para execu\u00e7\u00e3o local do sistema, rode o seguinte comando na pasta ra\u00edz do projeto (considerando que a virtualenv j\u00e1 esteja ativa): 1 python src/main.py Com isso o sistema ser\u00e1 executado no localhost e estar\u00e1 dispon\u00edvel na porta HTTP_PORT configurada para o sistema. Dessa forma \u00e9 poss\u00edvel testar as novas implementa\u00e7\u00f5es.","title":"Execu\u00e7\u00e3o Local"},{"location":"modules/api-auth/#testes","text":"Para executar os testes da API Auth siga o roteiro abaixo descrito: Ative a virtualenv auth ; Garanta que as depend\u00eancias estejam instaladas, principalmente: 1 2 3 pytest pytest - coverage flake8 Execute os comandos abaixo: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Define path do python pytest src/ # Executa os testes pytest --cov = auth src/ # Executa os testes avaliando a cobertura pytest --cov = auth --cov-report xml src/ # Gera o relat\u00f3rio em XML da cobertura flake8 src/ # Roda o linter do PEP8 unset PYTHONPATH # Remove a vari\u00e1vel PYTHONPATH Durante os testes o terminal apresentar\u00e1 um output com o relat\u00f3rio dos testes (falhas, skips e sucessos) e a cobertura de testes do sistema. Para outras configura\u00e7\u00f5es e documenta\u00e7\u00e3o complementar acesse pytest e coverage . Durante o processo de lint o terminal apresentar\u00e1 um relat\u00f3rio com erros e warnings do guia de estilo do PEP8, para mais configura\u00e7\u00f5es e a documenta\u00e7\u00e3o complementar acesse flake8 e PEP8","title":"Testes"},{"location":"modules/api-auth/#construcao","text":"Para fazer a constru\u00e7\u00e3o do servi\u00e7o do API Auth basta seguir o roteiro abaixo: 1 docker build -t api-auth:<version> . Definindo a vers\u00e3o em < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 e etc. Verifique se foi feito o login no servi\u00e7o do docker hub , caso n\u00e3o execute o comando do docker login . 1 docker push api-auth:<version> Por fim, caso a execu\u00e7\u00e3o do sistema ser\u00e1 feita pelo container docker constru\u00eddo execute: 1 docker run -d --name api-auth -e .env api-auth OBS : Pressup\u00f5e que as configura\u00e7\u00f5es est\u00e3o listadas no arquivo .env . Para mais configura\u00e7\u00f5es, op\u00e7\u00f5es de execu\u00e7\u00e3o e a documenta\u00e7\u00e3o complementar acesse Docker Gerado no Lero Lero \u21a9","title":"Constru\u00e7\u00e3o"},{"location":"modules/api-paycheck/","text":"API RH - Pagamentos Ainda assim, existem d\u00favidas a respeito de como a determina\u00e7\u00e3o clara de objetivos acarreta um processo de reformula\u00e7\u00e3o e moderniza\u00e7\u00e3o das posturas dos \u00f3rg\u00e3os dirigentes com rela\u00e7\u00e3o \u00e0s suas atribui\u00e7\u00f5es. 1 Depend\u00eancias Python 3.7.3 Flask 1.1.1 Configura\u00e7\u00e3o A configura\u00e7\u00e3o da API de Pagamentos se d\u00e1 por meio de vari\u00e1veis de ambiente do sistema operacional. Portanto a configura\u00e7\u00e3o dever\u00e1 ser feita no host ou dever\u00e1 ser passada para o ambiente do container . As configura\u00e7\u00f5es dispon\u00edveis s\u00e3o: HTTP_PORT : N\u00famero da porta HTTP no qual o servi\u00e7o ser\u00e1 disponibilizado. DECIMAL_PLACES : N\u00famero de casas decimais para apresenta\u00e7\u00e3o dos c\u00e1lculos PAYCHECK_CURRENCY : Qual a moeda para os valores de pagamento. Dispon\u00edvel BRL ( R$ ) e USD ( US$ ) . Caso tenha d\u00favidas de como configurar vari\u00e1veis de ambiente verifique em: Vari\u00e1veis de Ambiente - Linux Vari\u00e1veis de Ambiente - Docker OBS : Lembrando que o sistema foi desenvolvido para execu\u00e7\u00e3o em ambientes Linux e Docker. N\u00e3o h\u00e1 suporte oficial para Windows. Desenvolvimento Instalando o VirtualEnvWrapper Recomendados a utiliza\u00e7\u00e3o de um ambiente virtual criado pelo m\u00f3dulo virtualenvwrapper. Existe um s\u00edtio virtual com instru\u00e7\u00f5es em ingl\u00eas para a instala\u00e7\u00e3o que pode ser acessado aqui . Mas voc\u00ea pode tamb\u00e9m seguir o roteiro abaixo para a instala\u00e7\u00e3o do ambiente: 1 2 sudo python3 -m pip install -U pip # Faz a atualiza\u00e7\u00e3o do pip sudo python3 -m pip install virtualenvwrapper # Instala o m\u00f3dulo virtualenvwrapper OBS : Caso n\u00e3o tenha acesso de administrador na m\u00e1quina remova o sudo do in\u00edcio do comando e adicione a flag --user ao final do comando. Agora configure o seu shell para utilizar o virtualenvwrapper , adicionando essas duas linhas ao arquivo de inicializa\u00e7\u00e3o do seu shell ( .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh Caso queira adicionar um local espec\u00edfico de projeto basta adicionar uma terceira linha com o seguinte export : 1 export PROJECT_HOME = /path/to/project Execute o arquivo de inicializa\u00e7\u00e3o do shell para que as mudan\u00e7as surtam efeito, por exemplo: 1 source ~/.bashrc Agora crie um ambiente virtual com o seguinte comando (colocando o nome que deseja para o ambiente), neste exemplo usarei o nome paycheck : 1 mkvirtualenv -p $( which python3 ) paycheck Para utiliz\u00e1-lo: 1 2 3 workon paycheck sudo python3 -m pip install pipenv pipenv install # Ir\u00e1 instalar todas as depend\u00eancias usadas no projeto OBS: Novamente, caso necess\u00e1rio, adicione a flag --user para fazer a instala\u00e7\u00e3o do pacote do pipenv. Execu\u00e7\u00e3o Local Para execu\u00e7\u00e3o local do sistema, rode o seguinte comando na pasta ra\u00edz do projeto (considerando que a virtualenv j\u00e1 esteja ativa): 1 python src/main.py Com isso o sistema ser\u00e1 executado no localhost e estar\u00e1 dispon\u00edvel na porta HTTP_PORT configurada para o sistema. Dessa forma \u00e9 poss\u00edvel testar as novas implementa\u00e7\u00f5es. Testes Para executar os testes da API Paycheck siga o roteiro abaixo descrito: Ative a virtualenv paycheck ; Garanta que as depend\u00eancias estejam instaladas, principalmente: 1 2 3 pytest pytest - coverage flake8 Execute os comandos abaixo: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Define path do python pytest src/ # Executa os testes pytest --cov = paycheck src/ # Executa os testes avaliando a cobertura pytest --cov = paycheck --cov-report xml src/ # Gera o relat\u00f3rio em XML da cobertura flake8 src/ # Roda o linter do PEP8 unset PYTHONPATH # Remove a vari\u00e1vel PYTHONPATH Durante os testes o terminal apresentar\u00e1 um output com o relat\u00f3rio dos testes (falhas, skips e sucessos) e a cobertura de testes do sistema. Para outras configura\u00e7\u00f5es e documenta\u00e7\u00e3o complementar acesse pytest e coverage . Durante o processo de lint o terminal apresentar\u00e1 um relat\u00f3rio com erros e warnings do guia de estilo do PEP8, para mais configura\u00e7\u00f5es e a documenta\u00e7\u00e3o complementar acesse flake8 e PEP8 Constru\u00e7\u00e3o Para fazer a constru\u00e7\u00e3o do servi\u00e7o do API Paycheck basta seguir o roteiro abaixo: 1 docker build -t api-paycheck:<version> . Definindo a vers\u00e3o em < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 e etc. Verifique se foi feito o login no servi\u00e7o do docker hub , caso n\u00e3o execute o comando do docker login . 1 docker push api-paycheck:<version> Por fim, caso a execu\u00e7\u00e3o do sistema ser\u00e1 feita pelo container docker constru\u00eddo execute: 1 docker run -d --name api-paycheck -e .env api-paycheck OBS : Pressup\u00f5e que as configura\u00e7\u00f5es est\u00e3o listadas no arquivo .env . Para mais configura\u00e7\u00f5es, op\u00e7\u00f5es de execu\u00e7\u00e3o e a documenta\u00e7\u00e3o complementar acesse Docker Gerado no Lero Lero \u21a9","title":"API Paycheck"},{"location":"modules/api-paycheck/#api-rh-pagamentos","text":"Ainda assim, existem d\u00favidas a respeito de como a determina\u00e7\u00e3o clara de objetivos acarreta um processo de reformula\u00e7\u00e3o e moderniza\u00e7\u00e3o das posturas dos \u00f3rg\u00e3os dirigentes com rela\u00e7\u00e3o \u00e0s suas atribui\u00e7\u00f5es. 1","title":"API RH - Pagamentos"},{"location":"modules/api-paycheck/#dependencias","text":"Python 3.7.3 Flask 1.1.1","title":"Depend\u00eancias"},{"location":"modules/api-paycheck/#configuracao","text":"A configura\u00e7\u00e3o da API de Pagamentos se d\u00e1 por meio de vari\u00e1veis de ambiente do sistema operacional. Portanto a configura\u00e7\u00e3o dever\u00e1 ser feita no host ou dever\u00e1 ser passada para o ambiente do container . As configura\u00e7\u00f5es dispon\u00edveis s\u00e3o: HTTP_PORT : N\u00famero da porta HTTP no qual o servi\u00e7o ser\u00e1 disponibilizado. DECIMAL_PLACES : N\u00famero de casas decimais para apresenta\u00e7\u00e3o dos c\u00e1lculos PAYCHECK_CURRENCY : Qual a moeda para os valores de pagamento. Dispon\u00edvel BRL ( R$ ) e USD ( US$ ) . Caso tenha d\u00favidas de como configurar vari\u00e1veis de ambiente verifique em: Vari\u00e1veis de Ambiente - Linux Vari\u00e1veis de Ambiente - Docker OBS : Lembrando que o sistema foi desenvolvido para execu\u00e7\u00e3o em ambientes Linux e Docker. N\u00e3o h\u00e1 suporte oficial para Windows.","title":"Configura\u00e7\u00e3o"},{"location":"modules/api-paycheck/#desenvolvimento","text":"","title":"Desenvolvimento"},{"location":"modules/api-paycheck/#instalando-o-virtualenvwrapper","text":"Recomendados a utiliza\u00e7\u00e3o de um ambiente virtual criado pelo m\u00f3dulo virtualenvwrapper. Existe um s\u00edtio virtual com instru\u00e7\u00f5es em ingl\u00eas para a instala\u00e7\u00e3o que pode ser acessado aqui . Mas voc\u00ea pode tamb\u00e9m seguir o roteiro abaixo para a instala\u00e7\u00e3o do ambiente: 1 2 sudo python3 -m pip install -U pip # Faz a atualiza\u00e7\u00e3o do pip sudo python3 -m pip install virtualenvwrapper # Instala o m\u00f3dulo virtualenvwrapper OBS : Caso n\u00e3o tenha acesso de administrador na m\u00e1quina remova o sudo do in\u00edcio do comando e adicione a flag --user ao final do comando. Agora configure o seu shell para utilizar o virtualenvwrapper , adicionando essas duas linhas ao arquivo de inicializa\u00e7\u00e3o do seu shell ( .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh Caso queira adicionar um local espec\u00edfico de projeto basta adicionar uma terceira linha com o seguinte export : 1 export PROJECT_HOME = /path/to/project Execute o arquivo de inicializa\u00e7\u00e3o do shell para que as mudan\u00e7as surtam efeito, por exemplo: 1 source ~/.bashrc Agora crie um ambiente virtual com o seguinte comando (colocando o nome que deseja para o ambiente), neste exemplo usarei o nome paycheck : 1 mkvirtualenv -p $( which python3 ) paycheck Para utiliz\u00e1-lo: 1 2 3 workon paycheck sudo python3 -m pip install pipenv pipenv install # Ir\u00e1 instalar todas as depend\u00eancias usadas no projeto OBS: Novamente, caso necess\u00e1rio, adicione a flag --user para fazer a instala\u00e7\u00e3o do pacote do pipenv.","title":"Instalando o VirtualEnvWrapper"},{"location":"modules/api-paycheck/#execucao-local","text":"Para execu\u00e7\u00e3o local do sistema, rode o seguinte comando na pasta ra\u00edz do projeto (considerando que a virtualenv j\u00e1 esteja ativa): 1 python src/main.py Com isso o sistema ser\u00e1 executado no localhost e estar\u00e1 dispon\u00edvel na porta HTTP_PORT configurada para o sistema. Dessa forma \u00e9 poss\u00edvel testar as novas implementa\u00e7\u00f5es.","title":"Execu\u00e7\u00e3o Local"},{"location":"modules/api-paycheck/#testes","text":"Para executar os testes da API Paycheck siga o roteiro abaixo descrito: Ative a virtualenv paycheck ; Garanta que as depend\u00eancias estejam instaladas, principalmente: 1 2 3 pytest pytest - coverage flake8 Execute os comandos abaixo: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Define path do python pytest src/ # Executa os testes pytest --cov = paycheck src/ # Executa os testes avaliando a cobertura pytest --cov = paycheck --cov-report xml src/ # Gera o relat\u00f3rio em XML da cobertura flake8 src/ # Roda o linter do PEP8 unset PYTHONPATH # Remove a vari\u00e1vel PYTHONPATH Durante os testes o terminal apresentar\u00e1 um output com o relat\u00f3rio dos testes (falhas, skips e sucessos) e a cobertura de testes do sistema. Para outras configura\u00e7\u00f5es e documenta\u00e7\u00e3o complementar acesse pytest e coverage . Durante o processo de lint o terminal apresentar\u00e1 um relat\u00f3rio com erros e warnings do guia de estilo do PEP8, para mais configura\u00e7\u00f5es e a documenta\u00e7\u00e3o complementar acesse flake8 e PEP8","title":"Testes"},{"location":"modules/api-paycheck/#construcao","text":"Para fazer a constru\u00e7\u00e3o do servi\u00e7o do API Paycheck basta seguir o roteiro abaixo: 1 docker build -t api-paycheck:<version> . Definindo a vers\u00e3o em < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 e etc. Verifique se foi feito o login no servi\u00e7o do docker hub , caso n\u00e3o execute o comando do docker login . 1 docker push api-paycheck:<version> Por fim, caso a execu\u00e7\u00e3o do sistema ser\u00e1 feita pelo container docker constru\u00eddo execute: 1 docker run -d --name api-paycheck -e .env api-paycheck OBS : Pressup\u00f5e que as configura\u00e7\u00f5es est\u00e3o listadas no arquivo .env . Para mais configura\u00e7\u00f5es, op\u00e7\u00f5es de execu\u00e7\u00e3o e a documenta\u00e7\u00e3o complementar acesse Docker Gerado no Lero Lero \u21a9","title":"Constru\u00e7\u00e3o"},{"location":"modules/api-register/","text":"API RH - Cadastro Ainda assim, existem d\u00favidas a respeito de como a determina\u00e7\u00e3o clara de objetivos acarreta um processo de reformula\u00e7\u00e3o e moderniza\u00e7\u00e3o das posturas dos \u00f3rg\u00e3os dirigentes com rela\u00e7\u00e3o \u00e0s suas atribui\u00e7\u00f5es. 1 Depend\u00eancias Python 3.7.3 Flask 1.1.1 Configura\u00e7\u00e3o A configura\u00e7\u00e3o da API de Cadastro se d\u00e1 por meio de vari\u00e1veis de ambiente do sistema operacional. Portanto a configura\u00e7\u00e3o dever\u00e1 ser feita no host ou dever\u00e1 ser passada para o ambiente do container . As configura\u00e7\u00f5es dispon\u00edveis s\u00e3o: HTTP_PORT : N\u00famero da porta HTTP no qual o servi\u00e7o ser\u00e1 disponibilizado. DATABASE_HOST : Endere\u00e7o de rede do servidor do banco de dados. DATABASE_PORT : Porta no qual o servi\u00e7o de banco de dados est\u00e1 dispon\u00edvel. DATABASE_NAME : Nome do schema dispon\u00edvel para o servi\u00e7o. DATABASE_USER : Nome do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. DATABASE_PASSWORD : Senha do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. Caso tenha d\u00favidas de como configurar vari\u00e1veis de ambiente verifique em: Vari\u00e1veis de Ambiente - Linux Vari\u00e1veis de Ambiente - Docker OBS : Lembrando que o sistema foi desenvolvido para execu\u00e7\u00e3o em ambientes Linux e Docker. N\u00e3o h\u00e1 suporte oficial para Windows. Desenvolvimento Instalando o VirtualEnvWrapper Recomendados a utiliza\u00e7\u00e3o de um ambiente virtual criado pelo m\u00f3dulo virtualenvwrapper. Existe um s\u00edtio virtual com instru\u00e7\u00f5es em ingl\u00eas para a instala\u00e7\u00e3o que pode ser acessado aqui . Mas voc\u00ea pode tamb\u00e9m seguir o roteiro abaixo para a instala\u00e7\u00e3o do ambiente: 1 2 sudo python3 -m pip install -U pip # Faz a atualiza\u00e7\u00e3o do pip sudo python3 -m pip install virtualenvwrapper # Instala o m\u00f3dulo virtualenvwrapper OBS : Caso n\u00e3o tenha acesso de administrador na m\u00e1quina remova o sudo do in\u00edcio do comando e adicione a flag --user ao final do comando. Agora configure o seu shell para utilizar o virtualenvwrapper , adicionando essas duas linhas ao arquivo de inicializa\u00e7\u00e3o do seu shell ( .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh Caso queira adicionar um local espec\u00edfico de projeto basta adicionar uma terceira linha com o seguinte export : 1 export PROJECT_HOME = /path/to/project Execute o arquivo de inicializa\u00e7\u00e3o do shell para que as mudan\u00e7as surtam efeito, por exemplo: 1 source ~/.bashrc Agora crie um ambiente virtual com o seguinte comando (colocando o nome que deseja para o ambiente), neste exemplo usarei o nome register : 1 mkvirtualenv -p $( which python3 ) register Para utiliz\u00e1-lo: 1 2 3 workon register sudo python3 -m pip install pipenv pipenv install # Ir\u00e1 instalar todas as depend\u00eancias usadas no projeto OBS: Novamente, caso necess\u00e1rio, adicione a flag --user para fazer a instala\u00e7\u00e3o do pacote do pipenv. Execu\u00e7\u00e3o Local Para execu\u00e7\u00e3o local do sistema, rode o seguinte comando na pasta ra\u00edz do projeto (considerando que a virtualenv j\u00e1 esteja ativa): 1 python src/main.py Com isso o sistema ser\u00e1 executado no localhost e estar\u00e1 dispon\u00edvel na porta HTTP_PORT configurada para o sistema. Dessa forma \u00e9 poss\u00edvel testar as novas implementa\u00e7\u00f5es. Testes Para executar os testes da API Register siga o roteiro abaixo descrito: Ative a virtualenv register ; Garanta que as depend\u00eancias estejam instaladas, principalmente: 1 2 3 pytest pytest - coverage flake8 Execute os comandos abaixo: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Define path do python pytest src/ # Executa os testes pytest --cov = register src/ # Executa os testes avaliando a cobertura pytest --cov = register --cov-report xml src/ # Gera o relat\u00f3rio em XML da cobertura flake8 src/ # Roda o linter do PEP8 unset PYTHONPATH # Remove a vari\u00e1vel PYTHONPATH Durante os testes o terminal apresentar\u00e1 um output com o relat\u00f3rio dos testes (falhas, skips e sucessos) e a cobertura de testes do sistema. Para outras configura\u00e7\u00f5es e documenta\u00e7\u00e3o complementar acesse pytest e coverage . Durante o processo de lint o terminal apresentar\u00e1 um relat\u00f3rio com erros e warnings do guia de estilo do PEP8, para mais configura\u00e7\u00f5es e a documenta\u00e7\u00e3o complementar acesse flake8 e PEP8 Constru\u00e7\u00e3o Para fazer a constru\u00e7\u00e3o do servi\u00e7o do API Register basta seguir o roteiro abaixo: 1 docker build -t api-register:<version> . Definindo a vers\u00e3o em < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 e etc. Verifique se foi feito o login no servi\u00e7o do docker hub , caso n\u00e3o execute o comando do docker login . 1 docker push api-register:<version> Por fim, caso a execu\u00e7\u00e3o do sistema ser\u00e1 feita pelo container docker constru\u00eddo execute: 1 docker run -d --name api-register -e .env api-register OBS : Pressup\u00f5e que as configura\u00e7\u00f5es est\u00e3o listadas no arquivo .env . Para mais configura\u00e7\u00f5es, op\u00e7\u00f5es de execu\u00e7\u00e3o e a documenta\u00e7\u00e3o complementar acesse Docker Gerado no Lero Lero \u21a9","title":"API Register"},{"location":"modules/api-register/#api-rh-cadastro","text":"Ainda assim, existem d\u00favidas a respeito de como a determina\u00e7\u00e3o clara de objetivos acarreta um processo de reformula\u00e7\u00e3o e moderniza\u00e7\u00e3o das posturas dos \u00f3rg\u00e3os dirigentes com rela\u00e7\u00e3o \u00e0s suas atribui\u00e7\u00f5es. 1","title":"API RH - Cadastro"},{"location":"modules/api-register/#dependencias","text":"Python 3.7.3 Flask 1.1.1","title":"Depend\u00eancias"},{"location":"modules/api-register/#configuracao","text":"A configura\u00e7\u00e3o da API de Cadastro se d\u00e1 por meio de vari\u00e1veis de ambiente do sistema operacional. Portanto a configura\u00e7\u00e3o dever\u00e1 ser feita no host ou dever\u00e1 ser passada para o ambiente do container . As configura\u00e7\u00f5es dispon\u00edveis s\u00e3o: HTTP_PORT : N\u00famero da porta HTTP no qual o servi\u00e7o ser\u00e1 disponibilizado. DATABASE_HOST : Endere\u00e7o de rede do servidor do banco de dados. DATABASE_PORT : Porta no qual o servi\u00e7o de banco de dados est\u00e1 dispon\u00edvel. DATABASE_NAME : Nome do schema dispon\u00edvel para o servi\u00e7o. DATABASE_USER : Nome do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. DATABASE_PASSWORD : Senha do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. Caso tenha d\u00favidas de como configurar vari\u00e1veis de ambiente verifique em: Vari\u00e1veis de Ambiente - Linux Vari\u00e1veis de Ambiente - Docker OBS : Lembrando que o sistema foi desenvolvido para execu\u00e7\u00e3o em ambientes Linux e Docker. N\u00e3o h\u00e1 suporte oficial para Windows.","title":"Configura\u00e7\u00e3o"},{"location":"modules/api-register/#desenvolvimento","text":"","title":"Desenvolvimento"},{"location":"modules/api-register/#instalando-o-virtualenvwrapper","text":"Recomendados a utiliza\u00e7\u00e3o de um ambiente virtual criado pelo m\u00f3dulo virtualenvwrapper. Existe um s\u00edtio virtual com instru\u00e7\u00f5es em ingl\u00eas para a instala\u00e7\u00e3o que pode ser acessado aqui . Mas voc\u00ea pode tamb\u00e9m seguir o roteiro abaixo para a instala\u00e7\u00e3o do ambiente: 1 2 sudo python3 -m pip install -U pip # Faz a atualiza\u00e7\u00e3o do pip sudo python3 -m pip install virtualenvwrapper # Instala o m\u00f3dulo virtualenvwrapper OBS : Caso n\u00e3o tenha acesso de administrador na m\u00e1quina remova o sudo do in\u00edcio do comando e adicione a flag --user ao final do comando. Agora configure o seu shell para utilizar o virtualenvwrapper , adicionando essas duas linhas ao arquivo de inicializa\u00e7\u00e3o do seu shell ( .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh Caso queira adicionar um local espec\u00edfico de projeto basta adicionar uma terceira linha com o seguinte export : 1 export PROJECT_HOME = /path/to/project Execute o arquivo de inicializa\u00e7\u00e3o do shell para que as mudan\u00e7as surtam efeito, por exemplo: 1 source ~/.bashrc Agora crie um ambiente virtual com o seguinte comando (colocando o nome que deseja para o ambiente), neste exemplo usarei o nome register : 1 mkvirtualenv -p $( which python3 ) register Para utiliz\u00e1-lo: 1 2 3 workon register sudo python3 -m pip install pipenv pipenv install # Ir\u00e1 instalar todas as depend\u00eancias usadas no projeto OBS: Novamente, caso necess\u00e1rio, adicione a flag --user para fazer a instala\u00e7\u00e3o do pacote do pipenv.","title":"Instalando o VirtualEnvWrapper"},{"location":"modules/api-register/#execucao-local","text":"Para execu\u00e7\u00e3o local do sistema, rode o seguinte comando na pasta ra\u00edz do projeto (considerando que a virtualenv j\u00e1 esteja ativa): 1 python src/main.py Com isso o sistema ser\u00e1 executado no localhost e estar\u00e1 dispon\u00edvel na porta HTTP_PORT configurada para o sistema. Dessa forma \u00e9 poss\u00edvel testar as novas implementa\u00e7\u00f5es.","title":"Execu\u00e7\u00e3o Local"},{"location":"modules/api-register/#testes","text":"Para executar os testes da API Register siga o roteiro abaixo descrito: Ative a virtualenv register ; Garanta que as depend\u00eancias estejam instaladas, principalmente: 1 2 3 pytest pytest - coverage flake8 Execute os comandos abaixo: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Define path do python pytest src/ # Executa os testes pytest --cov = register src/ # Executa os testes avaliando a cobertura pytest --cov = register --cov-report xml src/ # Gera o relat\u00f3rio em XML da cobertura flake8 src/ # Roda o linter do PEP8 unset PYTHONPATH # Remove a vari\u00e1vel PYTHONPATH Durante os testes o terminal apresentar\u00e1 um output com o relat\u00f3rio dos testes (falhas, skips e sucessos) e a cobertura de testes do sistema. Para outras configura\u00e7\u00f5es e documenta\u00e7\u00e3o complementar acesse pytest e coverage . Durante o processo de lint o terminal apresentar\u00e1 um relat\u00f3rio com erros e warnings do guia de estilo do PEP8, para mais configura\u00e7\u00f5es e a documenta\u00e7\u00e3o complementar acesse flake8 e PEP8","title":"Testes"},{"location":"modules/api-register/#construcao","text":"Para fazer a constru\u00e7\u00e3o do servi\u00e7o do API Register basta seguir o roteiro abaixo: 1 docker build -t api-register:<version> . Definindo a vers\u00e3o em < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 e etc. Verifique se foi feito o login no servi\u00e7o do docker hub , caso n\u00e3o execute o comando do docker login . 1 docker push api-register:<version> Por fim, caso a execu\u00e7\u00e3o do sistema ser\u00e1 feita pelo container docker constru\u00eddo execute: 1 docker run -d --name api-register -e .env api-register OBS : Pressup\u00f5e que as configura\u00e7\u00f5es est\u00e3o listadas no arquivo .env . Para mais configura\u00e7\u00f5es, op\u00e7\u00f5es de execu\u00e7\u00e3o e a documenta\u00e7\u00e3o complementar acesse Docker Gerado no Lero Lero \u21a9","title":"Constru\u00e7\u00e3o"},{"location":"modules/api-vacation/","text":"API RH - F\u00e9rias Ainda assim, existem d\u00favidas a respeito de como a determina\u00e7\u00e3o clara de objetivos acarreta um processo de reformula\u00e7\u00e3o e moderniza\u00e7\u00e3o das posturas dos \u00f3rg\u00e3os dirigentes com rela\u00e7\u00e3o \u00e0s suas atribui\u00e7\u00f5es. 1 Depend\u00eancias Python 3.7.3 Flask 1.1.1 Configura\u00e7\u00e3o A configura\u00e7\u00e3o da API de F\u00e9rias se d\u00e1 por meio de vari\u00e1veis de ambiente do sistema operacional. Portanto a configura\u00e7\u00e3o dever\u00e1 ser feita no host ou dever\u00e1 ser passada para o ambiente do container . As configura\u00e7\u00f5es dispon\u00edveis s\u00e3o: HTTP_PORT : N\u00famero da porta HTTP no qual o servi\u00e7o ser\u00e1 disponibilizado. DATABASE_HOST : Endere\u00e7o de rede do servidor do banco de dados. DATABASE_PORT : Porta no qual o servi\u00e7o de banco de dados est\u00e1 dispon\u00edvel. DATABASE_NAME : Nome do schema dispon\u00edvel para o servi\u00e7o. DATABASE_USER : Nome do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. DATABASE_PASSWORD : Senha do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. CALENDAR_API_URL : URL da API que fornece as datas tratadas para agendamentos. Caso tenha d\u00favidas de como configurar vari\u00e1veis de ambiente verifique em: Vari\u00e1veis de Ambiente - Linux Vari\u00e1veis de Ambiente - Docker OBS : Lembrando que o sistema foi desenvolvido para execu\u00e7\u00e3o em ambientes Linux e Docker. N\u00e3o h\u00e1 suporte oficial para Windows. Desenvolvimento Instalando o VirtualEnvWrapper Recomendados a utiliza\u00e7\u00e3o de um ambiente virtual criado pelo m\u00f3dulo virtualenvwrapper. Existe um s\u00edtio virtual com instru\u00e7\u00f5es em ingl\u00eas para a instala\u00e7\u00e3o que pode ser acessado aqui . Mas voc\u00ea pode tamb\u00e9m seguir o roteiro abaixo para a instala\u00e7\u00e3o do ambiente: 1 2 sudo python3 -m pip install -U pip # Faz a atualiza\u00e7\u00e3o do pip sudo python3 -m pip install virtualenvwrapper # Instala o m\u00f3dulo virtualenvwrapper OBS : Caso n\u00e3o tenha acesso de administrador na m\u00e1quina remova o sudo do in\u00edcio do comando e adicione a flag --user ao final do comando. Agora configure o seu shell para utilizar o virtualenvwrapper , adicionando essas duas linhas ao arquivo de inicializa\u00e7\u00e3o do seu shell ( .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh Caso queira adicionar um local espec\u00edfico de projeto basta adicionar uma terceira linha com o seguinte export : 1 export PROJECT_HOME = /path/to/project Execute o arquivo de inicializa\u00e7\u00e3o do shell para que as mudan\u00e7as surtam efeito, por exemplo: 1 source ~/.bashrc Agora crie um ambiente virtual com o seguinte comando (colocando o nome que deseja para o ambiente), neste exemplo usarei o nome vacation : 1 mkvirtualenv -p $( which python3 ) vacation Para utiliz\u00e1-lo: 1 2 3 workon vacation sudo python3 -m pip install pipenv pipenv install # Ir\u00e1 instalar todas as depend\u00eancias usadas no projeto OBS: Novamente, caso necess\u00e1rio, adicione a flag --user para fazer a instala\u00e7\u00e3o do pacote do pipenv. Execu\u00e7\u00e3o Local Para execu\u00e7\u00e3o local do sistema, rode o seguinte comando na pasta ra\u00edz do projeto (considerando que a virtualenv j\u00e1 esteja ativa): 1 python src/main.py Com isso o sistema ser\u00e1 executado no localhost e estar\u00e1 dispon\u00edvel na porta HTTP_PORT configurada para o sistema. Dessa forma \u00e9 poss\u00edvel testar as novas implementa\u00e7\u00f5es. Testes Para executar os testes da API Vacation siga o roteiro abaixo descrito: Ative a virtualenv vacation ; Garanta que as depend\u00eancias estejam instaladas, principalmente: 1 2 3 pytest pytest - coverage flake8 Execute os comandos abaixo: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Define path do python pytest src/ # Executa os testes pytest --cov = vacation src/ # Executa os testes avaliando a cobertura pytest --cov = vacation --cov-report xml src/ # Gera o relat\u00f3rio em XML da cobertura flake8 src/ # Roda o linter do PEP8 unset PYTHONPATH # Remove a vari\u00e1vel PYTHONPATH Durante os testes o terminal apresentar\u00e1 um output com o relat\u00f3rio dos testes (falhas, skips e sucessos) e a cobertura de testes do sistema. Para outras configura\u00e7\u00f5es e documenta\u00e7\u00e3o complementar acesse pytest e coverage . Durante o processo de lint o terminal apresentar\u00e1 um relat\u00f3rio com erros e warnings do guia de estilo do PEP8, para mais configura\u00e7\u00f5es e a documenta\u00e7\u00e3o complementar acesse flake8 e PEP8 Constru\u00e7\u00e3o Para fazer a constru\u00e7\u00e3o do servi\u00e7o do API Vacation basta seguir o roteiro abaixo: 1 docker build -t api-vacation:<version> . Definindo a vers\u00e3o em < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 e etc. Verifique se foi feito o login no servi\u00e7o do docker hub , caso n\u00e3o execute o comando do docker login . 1 docker push api-vacation:<version> Por fim, caso a execu\u00e7\u00e3o do sistema ser\u00e1 feita pelo container docker constru\u00eddo execute: 1 docker run -d --name api-vacation -e .env api-vacation OBS : Pressup\u00f5e que as configura\u00e7\u00f5es est\u00e3o listadas no arquivo .env . Para mais configura\u00e7\u00f5es, op\u00e7\u00f5es de execu\u00e7\u00e3o e a documenta\u00e7\u00e3o complementar acesse Docker Gerado no Lero Lero \u21a9","title":"API Vacation"},{"location":"modules/api-vacation/#api-rh-ferias","text":"Ainda assim, existem d\u00favidas a respeito de como a determina\u00e7\u00e3o clara de objetivos acarreta um processo de reformula\u00e7\u00e3o e moderniza\u00e7\u00e3o das posturas dos \u00f3rg\u00e3os dirigentes com rela\u00e7\u00e3o \u00e0s suas atribui\u00e7\u00f5es. 1","title":"API RH - F\u00e9rias"},{"location":"modules/api-vacation/#dependencias","text":"Python 3.7.3 Flask 1.1.1","title":"Depend\u00eancias"},{"location":"modules/api-vacation/#configuracao","text":"A configura\u00e7\u00e3o da API de F\u00e9rias se d\u00e1 por meio de vari\u00e1veis de ambiente do sistema operacional. Portanto a configura\u00e7\u00e3o dever\u00e1 ser feita no host ou dever\u00e1 ser passada para o ambiente do container . As configura\u00e7\u00f5es dispon\u00edveis s\u00e3o: HTTP_PORT : N\u00famero da porta HTTP no qual o servi\u00e7o ser\u00e1 disponibilizado. DATABASE_HOST : Endere\u00e7o de rede do servidor do banco de dados. DATABASE_PORT : Porta no qual o servi\u00e7o de banco de dados est\u00e1 dispon\u00edvel. DATABASE_NAME : Nome do schema dispon\u00edvel para o servi\u00e7o. DATABASE_USER : Nome do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. DATABASE_PASSWORD : Senha do usu\u00e1rio para autentica\u00e7\u00e3o no banco de dados. CALENDAR_API_URL : URL da API que fornece as datas tratadas para agendamentos. Caso tenha d\u00favidas de como configurar vari\u00e1veis de ambiente verifique em: Vari\u00e1veis de Ambiente - Linux Vari\u00e1veis de Ambiente - Docker OBS : Lembrando que o sistema foi desenvolvido para execu\u00e7\u00e3o em ambientes Linux e Docker. N\u00e3o h\u00e1 suporte oficial para Windows.","title":"Configura\u00e7\u00e3o"},{"location":"modules/api-vacation/#desenvolvimento","text":"","title":"Desenvolvimento"},{"location":"modules/api-vacation/#instalando-o-virtualenvwrapper","text":"Recomendados a utiliza\u00e7\u00e3o de um ambiente virtual criado pelo m\u00f3dulo virtualenvwrapper. Existe um s\u00edtio virtual com instru\u00e7\u00f5es em ingl\u00eas para a instala\u00e7\u00e3o que pode ser acessado aqui . Mas voc\u00ea pode tamb\u00e9m seguir o roteiro abaixo para a instala\u00e7\u00e3o do ambiente: 1 2 sudo python3 -m pip install -U pip # Faz a atualiza\u00e7\u00e3o do pip sudo python3 -m pip install virtualenvwrapper # Instala o m\u00f3dulo virtualenvwrapper OBS : Caso n\u00e3o tenha acesso de administrador na m\u00e1quina remova o sudo do in\u00edcio do comando e adicione a flag --user ao final do comando. Agora configure o seu shell para utilizar o virtualenvwrapper , adicionando essas duas linhas ao arquivo de inicializa\u00e7\u00e3o do seu shell ( .bashrc , .profile , etc.) 1 2 export WORKON_HOME = \\$ HOME/.virtualenvs source /usr/local/bin/virtualenvwrapper.sh Caso queira adicionar um local espec\u00edfico de projeto basta adicionar uma terceira linha com o seguinte export : 1 export PROJECT_HOME = /path/to/project Execute o arquivo de inicializa\u00e7\u00e3o do shell para que as mudan\u00e7as surtam efeito, por exemplo: 1 source ~/.bashrc Agora crie um ambiente virtual com o seguinte comando (colocando o nome que deseja para o ambiente), neste exemplo usarei o nome vacation : 1 mkvirtualenv -p $( which python3 ) vacation Para utiliz\u00e1-lo: 1 2 3 workon vacation sudo python3 -m pip install pipenv pipenv install # Ir\u00e1 instalar todas as depend\u00eancias usadas no projeto OBS: Novamente, caso necess\u00e1rio, adicione a flag --user para fazer a instala\u00e7\u00e3o do pacote do pipenv.","title":"Instalando o VirtualEnvWrapper"},{"location":"modules/api-vacation/#execucao-local","text":"Para execu\u00e7\u00e3o local do sistema, rode o seguinte comando na pasta ra\u00edz do projeto (considerando que a virtualenv j\u00e1 esteja ativa): 1 python src/main.py Com isso o sistema ser\u00e1 executado no localhost e estar\u00e1 dispon\u00edvel na porta HTTP_PORT configurada para o sistema. Dessa forma \u00e9 poss\u00edvel testar as novas implementa\u00e7\u00f5es.","title":"Execu\u00e7\u00e3o Local"},{"location":"modules/api-vacation/#testes","text":"Para executar os testes da API Vacation siga o roteiro abaixo descrito: Ative a virtualenv vacation ; Garanta que as depend\u00eancias estejam instaladas, principalmente: 1 2 3 pytest pytest - coverage flake8 Execute os comandos abaixo: 1 2 3 4 5 6 export PYTHONPATH = $( pwd ) # Define path do python pytest src/ # Executa os testes pytest --cov = vacation src/ # Executa os testes avaliando a cobertura pytest --cov = vacation --cov-report xml src/ # Gera o relat\u00f3rio em XML da cobertura flake8 src/ # Roda o linter do PEP8 unset PYTHONPATH # Remove a vari\u00e1vel PYTHONPATH Durante os testes o terminal apresentar\u00e1 um output com o relat\u00f3rio dos testes (falhas, skips e sucessos) e a cobertura de testes do sistema. Para outras configura\u00e7\u00f5es e documenta\u00e7\u00e3o complementar acesse pytest e coverage . Durante o processo de lint o terminal apresentar\u00e1 um relat\u00f3rio com erros e warnings do guia de estilo do PEP8, para mais configura\u00e7\u00f5es e a documenta\u00e7\u00e3o complementar acesse flake8 e PEP8","title":"Testes"},{"location":"modules/api-vacation/#construcao","text":"Para fazer a constru\u00e7\u00e3o do servi\u00e7o do API Vacation basta seguir o roteiro abaixo: 1 docker build -t api-vacation:<version> . Definindo a vers\u00e3o em < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 e etc. Verifique se foi feito o login no servi\u00e7o do docker hub , caso n\u00e3o execute o comando do docker login . 1 docker push api-vacation:<version> Por fim, caso a execu\u00e7\u00e3o do sistema ser\u00e1 feita pelo container docker constru\u00eddo execute: 1 docker run -d --name api-vacation -e .env api-vacation OBS : Pressup\u00f5e que as configura\u00e7\u00f5es est\u00e3o listadas no arquivo .env . Para mais configura\u00e7\u00f5es, op\u00e7\u00f5es de execu\u00e7\u00e3o e a documenta\u00e7\u00e3o complementar acesse Docker Gerado no Lero Lero \u21a9","title":"Constru\u00e7\u00e3o"},{"location":"modules/front-register/","text":"App RH - Cadastro Aplica\u00e7\u00e3o de Front para o sistema de Cadastro de RH. Constru\u00eddo em AngularJS, permite que o usu\u00e1rio fa\u00e7a uso da API de RH e gerencie os fluxos de trabalho de RH. O Front de Cadastro apresenta uma interface amig\u00e1vel entre o usu\u00e1rio e o sistema. O Front ainda apresenta informa\u00e7\u00f5es das execu\u00e7\u00f5es do sistema e dados para que o usu\u00e1rio seja capaz de averiguar informa\u00e7\u00f5es comuns de um fluxo de trabalho em RH. Depend\u00eancias Angular CLI 8.3.5 Yarn 1.17.3 Node.JS 10.16.3 Configura\u00e7\u00e3o A configura\u00e7\u00e3o da Front de Cadastro se d\u00e1 por meio de vari\u00e1veis de ambiente do sistema operacional. Portanto a configura\u00e7\u00e3o dever\u00e1 ser feita nas configura\u00e7\u00f5es de ambiente do container . As configura\u00e7\u00f5es dispon\u00edveis s\u00e3o: REGISTER_API : URL da API de Cadastro. Caso tenha d\u00favidas de como configurar vari\u00e1veis de ambiente verifique em: Vari\u00e1veis de Ambiente - Docker OBS : Lembrando que o sistema foi desenvolvido para execu\u00e7\u00e3o em ambientes Linux e Docker. N\u00e3o h\u00e1 suporte oficial para Windows. Desenvolvimento Instalando as Depend\u00eancias Para instalar as depend\u00eancias de desenvolvimento certifique-se de que as depend\u00eancias chaves do projeto ( nodejs , angular - cli e yarn ) est\u00e3o instaladas. Caso estejam, basta executar o comando abaixo: 1 yarn install O yarn ir\u00e1 fazer a instala\u00e7\u00e3o de todos os pacotes presentes no arquivo package . json e criar\u00e1 uma pasta node_modules com os arquivos das depend\u00eancias. OBS : Caso queira isolar vers\u00f5es do nodejs e depend\u00eancias entre projetos, visite o site do projeto NVM , um gerenciador de vers\u00f5es do node. Configurando as Vari\u00e1veis de Ambiente Para execu\u00e7\u00e3o em desenvolvimento \u00e9 preciso configurar as vari\u00e1veis de ambiente do projeto. Elas est\u00e3o no arquivo environment . ts localizado em < project - path >/ src / environments , e devem ser configuradas da seguinte forma: 1 2 3 4 export const environment = { production : false , REGISTER_API : \"https://0.0.0.0:1234/api\" }; Lembrando que a REGISTER_API deve ser a URL da API de Cadastro. Execu\u00e7\u00e3o Local Para execu\u00e7\u00e3o local do sistema, siga o roteiro abaixo (considerando que as depend\u00eancias foram instaladas e as vari\u00e1veis de ambiente est\u00e3o devidamente configuradas): 1 ng serve Com isso o sistema ser\u00e1 executado no localhost e estar\u00e1 dispon\u00edvel no endere\u00e7o http : // 0 . 0 . 0 . 0 : 4200 / . Dessa forma \u00e9 poss\u00edvel testar as novas implementa\u00e7\u00f5es e a cada modifica\u00e7\u00e3o a aplica\u00e7\u00e3o vai recarregar as altera\u00e7\u00f5es automaticamente. Testes Executando Testes Unit\u00e1rios Para execu\u00e7\u00e3o de testes unit\u00e1rios o sistema utiliza do Karma , caso as depend\u00eancias j\u00e1 estejam instaladas, basta executar: 1 ng test Caso voc\u00ea queira executar apenas uma vez adicione a flag --watch=false . Caso contr\u00e1rio o sistema ficar\u00e1 observando altera\u00e7\u00f5es para test\u00e1-las. Executando Testes Ponta-a-Ponta Para execu\u00e7\u00e3o dos testes ponta-a-ponta ( E2E ) o sistema do Protractor , caso as depend\u00eancias j\u00e1 estejam instaladas, basta executar: 1 ng e2e Constru\u00e7\u00e3o Para fazer a constru\u00e7\u00e3o do servi\u00e7o do FrontEnd Register basta seguir o roteiro abaixo: 1 docker build -t frint-register:<version> . Definindo a vers\u00e3o em < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 e etc. Verifique se foi feito o login no servi\u00e7o do docker hub , caso n\u00e3o execute o comando do docker login . 1 docker push front-register:<version> Por fim, caso a execu\u00e7\u00e3o do sistema ser\u00e1 feita pelo container docker constru\u00eddo execute: 1 docker run -d --name front-register -e .env front-register Caso queira fazer a constru\u00e7\u00e3o do sistema por meio do Angular CLI para servir via host ao inv\u00e9s de containers , use o seguinte comando: 1 ng build Os aterfatos da constru\u00e7\u00e3o ser\u00e3o armazenados na pasta dist / . Use a flag --prod para construir uma vers\u00e3o de produ\u00e7\u00e3o. Para executar basta servir via nginx ou apache os artefatos presentes na pasta dist / . OBS : Pressup\u00f5e que as configura\u00e7\u00f5es est\u00e3o listadas no arquivo .env . Para mais configura\u00e7\u00f5es, op\u00e7\u00f5es de execu\u00e7\u00e3o e a documenta\u00e7\u00e3o complementar acesse Docker","title":"Front Register"},{"location":"modules/front-register/#app-rh-cadastro","text":"Aplica\u00e7\u00e3o de Front para o sistema de Cadastro de RH. Constru\u00eddo em AngularJS, permite que o usu\u00e1rio fa\u00e7a uso da API de RH e gerencie os fluxos de trabalho de RH. O Front de Cadastro apresenta uma interface amig\u00e1vel entre o usu\u00e1rio e o sistema. O Front ainda apresenta informa\u00e7\u00f5es das execu\u00e7\u00f5es do sistema e dados para que o usu\u00e1rio seja capaz de averiguar informa\u00e7\u00f5es comuns de um fluxo de trabalho em RH.","title":"App RH - Cadastro"},{"location":"modules/front-register/#dependencias","text":"Angular CLI 8.3.5 Yarn 1.17.3 Node.JS 10.16.3","title":"Depend\u00eancias"},{"location":"modules/front-register/#configuracao","text":"A configura\u00e7\u00e3o da Front de Cadastro se d\u00e1 por meio de vari\u00e1veis de ambiente do sistema operacional. Portanto a configura\u00e7\u00e3o dever\u00e1 ser feita nas configura\u00e7\u00f5es de ambiente do container . As configura\u00e7\u00f5es dispon\u00edveis s\u00e3o: REGISTER_API : URL da API de Cadastro. Caso tenha d\u00favidas de como configurar vari\u00e1veis de ambiente verifique em: Vari\u00e1veis de Ambiente - Docker OBS : Lembrando que o sistema foi desenvolvido para execu\u00e7\u00e3o em ambientes Linux e Docker. N\u00e3o h\u00e1 suporte oficial para Windows.","title":"Configura\u00e7\u00e3o"},{"location":"modules/front-register/#desenvolvimento","text":"","title":"Desenvolvimento"},{"location":"modules/front-register/#instalando-as-dependencias","text":"Para instalar as depend\u00eancias de desenvolvimento certifique-se de que as depend\u00eancias chaves do projeto ( nodejs , angular - cli e yarn ) est\u00e3o instaladas. Caso estejam, basta executar o comando abaixo: 1 yarn install O yarn ir\u00e1 fazer a instala\u00e7\u00e3o de todos os pacotes presentes no arquivo package . json e criar\u00e1 uma pasta node_modules com os arquivos das depend\u00eancias. OBS : Caso queira isolar vers\u00f5es do nodejs e depend\u00eancias entre projetos, visite o site do projeto NVM , um gerenciador de vers\u00f5es do node.","title":"Instalando as Depend\u00eancias"},{"location":"modules/front-register/#configurando-as-variaveis-de-ambiente","text":"Para execu\u00e7\u00e3o em desenvolvimento \u00e9 preciso configurar as vari\u00e1veis de ambiente do projeto. Elas est\u00e3o no arquivo environment . ts localizado em < project - path >/ src / environments , e devem ser configuradas da seguinte forma: 1 2 3 4 export const environment = { production : false , REGISTER_API : \"https://0.0.0.0:1234/api\" }; Lembrando que a REGISTER_API deve ser a URL da API de Cadastro.","title":"Configurando as Vari\u00e1veis de Ambiente"},{"location":"modules/front-register/#execucao-local","text":"Para execu\u00e7\u00e3o local do sistema, siga o roteiro abaixo (considerando que as depend\u00eancias foram instaladas e as vari\u00e1veis de ambiente est\u00e3o devidamente configuradas): 1 ng serve Com isso o sistema ser\u00e1 executado no localhost e estar\u00e1 dispon\u00edvel no endere\u00e7o http : // 0 . 0 . 0 . 0 : 4200 / . Dessa forma \u00e9 poss\u00edvel testar as novas implementa\u00e7\u00f5es e a cada modifica\u00e7\u00e3o a aplica\u00e7\u00e3o vai recarregar as altera\u00e7\u00f5es automaticamente.","title":"Execu\u00e7\u00e3o Local"},{"location":"modules/front-register/#testes","text":"","title":"Testes"},{"location":"modules/front-register/#executando-testes-unitarios","text":"Para execu\u00e7\u00e3o de testes unit\u00e1rios o sistema utiliza do Karma , caso as depend\u00eancias j\u00e1 estejam instaladas, basta executar: 1 ng test Caso voc\u00ea queira executar apenas uma vez adicione a flag --watch=false . Caso contr\u00e1rio o sistema ficar\u00e1 observando altera\u00e7\u00f5es para test\u00e1-las.","title":"Executando Testes Unit\u00e1rios"},{"location":"modules/front-register/#executando-testes-ponta-a-ponta","text":"Para execu\u00e7\u00e3o dos testes ponta-a-ponta ( E2E ) o sistema do Protractor , caso as depend\u00eancias j\u00e1 estejam instaladas, basta executar: 1 ng e2e","title":"Executando Testes Ponta-a-Ponta"},{"location":"modules/front-register/#construcao","text":"Para fazer a constru\u00e7\u00e3o do servi\u00e7o do FrontEnd Register basta seguir o roteiro abaixo: 1 docker build -t frint-register:<version> . Definindo a vers\u00e3o em < version > . E.g.: latest , stable , alpha , 1 . 0 . 0 e etc. Verifique se foi feito o login no servi\u00e7o do docker hub , caso n\u00e3o execute o comando do docker login . 1 docker push front-register:<version> Por fim, caso a execu\u00e7\u00e3o do sistema ser\u00e1 feita pelo container docker constru\u00eddo execute: 1 docker run -d --name front-register -e .env front-register Caso queira fazer a constru\u00e7\u00e3o do sistema por meio do Angular CLI para servir via host ao inv\u00e9s de containers , use o seguinte comando: 1 ng build Os aterfatos da constru\u00e7\u00e3o ser\u00e3o armazenados na pasta dist / . Use a flag --prod para construir uma vers\u00e3o de produ\u00e7\u00e3o. Para executar basta servir via nginx ou apache os artefatos presentes na pasta dist / . OBS : Pressup\u00f5e que as configura\u00e7\u00f5es est\u00e3o listadas no arquivo .env . Para mais configura\u00e7\u00f5es, op\u00e7\u00f5es de execu\u00e7\u00e3o e a documenta\u00e7\u00e3o complementar acesse Docker","title":"Constru\u00e7\u00e3o"},{"location":"solution/about-rh/","text":"About RH Project Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce in dapibus ipsum. Nam eu dignissim nulla. Pellentesque sed pretium ex. Nullam eget fermentum enim, eget facilisis arcu. In lobortis accumsan libero a maximus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum posuere ut leo et pulvinar. Aenean id condimentum ex. Proin tempor egestas enim, eget condimentum risus tempus sit amet. Quisque et tellus vitae lacus dignissim posuere sed fermentum lacus. Aliquam at eros vel leo semper fermentum non eu quam. Sed et sapien malesuada leo semper dignissim. Phasellus tincidunt ligula aliquam felis sagittis tempor. Phasellus id lorem eget erat luctus interdum at eu eros. Duis congue dapibus mauris, condimentum imperdiet ante eleifend non. Maecenas mattis viverra lorem et hendrerit. Phasellus vel pulvinar lacus.","title":"About"},{"location":"solution/about-rh/#about-rh-project","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce in dapibus ipsum. Nam eu dignissim nulla. Pellentesque sed pretium ex. Nullam eget fermentum enim, eget facilisis arcu. In lobortis accumsan libero a maximus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum posuere ut leo et pulvinar. Aenean id condimentum ex. Proin tempor egestas enim, eget condimentum risus tempus sit amet. Quisque et tellus vitae lacus dignissim posuere sed fermentum lacus. Aliquam at eros vel leo semper fermentum non eu quam. Sed et sapien malesuada leo semper dignissim. Phasellus tincidunt ligula aliquam felis sagittis tempor. Phasellus id lorem eget erat luctus interdum at eu eros. Duis congue dapibus mauris, condimentum imperdiet ante eleifend non. Maecenas mattis viverra lorem et hendrerit. Phasellus vel pulvinar lacus.","title":"About RH Project"},{"location":"solution/architecture/","text":"Architectural Representation A imagem abaixo representa arquiteturalmente como est\u00e3o dispostos os componentes dentro da solu\u00e7\u00e3o do sistema de RH. 1 Est\u00e3o listados os componentes que est\u00e3o presentes na solu\u00e7\u00e3o e tem sua documenta\u00e7\u00e3o aqui listada por: Auth API Paycheck API Register API Vacation API RH App - Register Caso deseje ver as interfaces de cada uma das APIs, acesse: Interface - Auth API Interface - Paycheck API Interface - Register API Interface - Vacation API RH Software Architetural Diagram (SOURCE: Jo\u00e3o Pedro Sconetto) \u21a9","title":"Architecture"},{"location":"solution/architecture/#architectural-representation","text":"A imagem abaixo representa arquiteturalmente como est\u00e3o dispostos os componentes dentro da solu\u00e7\u00e3o do sistema de RH. 1 Est\u00e3o listados os componentes que est\u00e3o presentes na solu\u00e7\u00e3o e tem sua documenta\u00e7\u00e3o aqui listada por: Auth API Paycheck API Register API Vacation API RH App - Register Caso deseje ver as interfaces de cada uma das APIs, acesse: Interface - Auth API Interface - Paycheck API Interface - Register API Interface - Vacation API RH Software Architetural Diagram (SOURCE: Jo\u00e3o Pedro Sconetto) \u21a9","title":"Architectural Representation"}]}